
L432KCwithPCA9685.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f54  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080020e0  080020e0  000120e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002120  08002120  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002120  08002120  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002120  08002120  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002120  08002120  00012120  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002124  08002124  00012124  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002128  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000074  2000000c  08002134  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000080  08002134  00020080  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008891  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000019cd  00000000  00000000  00028910  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000958  00000000  00000000  0002a2e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000070f  00000000  00000000  0002ac38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001eeff  00000000  00000000  0002b347  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c07e  00000000  00000000  0004a246  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b936b  00000000  00000000  000562c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000247c  00000000  00000000  0010f630  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00111aac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	2000000c 	.word	0x2000000c
 80001a8:	00000000 	.word	0x00000000
 80001ac:	080020c8 	.word	0x080020c8

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	20000010 	.word	0x20000010
 80001c8:	080020c8 	.word	0x080020c8

080001cc <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b088      	sub	sp, #32
 80001d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80001d2:	f107 030c 	add.w	r3, r7, #12
 80001d6:	2200      	movs	r2, #0
 80001d8:	601a      	str	r2, [r3, #0]
 80001da:	605a      	str	r2, [r3, #4]
 80001dc:	609a      	str	r2, [r3, #8]
 80001de:	60da      	str	r2, [r3, #12]
 80001e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001e2:	4b23      	ldr	r3, [pc, #140]	; (8000270 <MX_GPIO_Init+0xa4>)
 80001e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001e6:	4a22      	ldr	r2, [pc, #136]	; (8000270 <MX_GPIO_Init+0xa4>)
 80001e8:	f043 0301 	orr.w	r3, r3, #1
 80001ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80001ee:	4b20      	ldr	r3, [pc, #128]	; (8000270 <MX_GPIO_Init+0xa4>)
 80001f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001f2:	f003 0301 	and.w	r3, r3, #1
 80001f6:	60bb      	str	r3, [r7, #8]
 80001f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001fa:	4b1d      	ldr	r3, [pc, #116]	; (8000270 <MX_GPIO_Init+0xa4>)
 80001fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80001fe:	4a1c      	ldr	r2, [pc, #112]	; (8000270 <MX_GPIO_Init+0xa4>)
 8000200:	f043 0302 	orr.w	r3, r3, #2
 8000204:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000206:	4b1a      	ldr	r3, [pc, #104]	; (8000270 <MX_GPIO_Init+0xa4>)
 8000208:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800020a:	f003 0302 	and.w	r3, r3, #2
 800020e:	607b      	str	r3, [r7, #4]
 8000210:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(motor_control_pin_2_GPIO_Port, motor_control_pin_2_Pin, GPIO_PIN_SET);
 8000212:	2201      	movs	r2, #1
 8000214:	2101      	movs	r1, #1
 8000216:	4817      	ldr	r0, [pc, #92]	; (8000274 <MX_GPIO_Init+0xa8>)
 8000218:	f000 fc94 	bl	8000b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(motor_control_pin_1_GPIO_Port, motor_control_pin_1_Pin, GPIO_PIN_SET);
 800021c:	2201      	movs	r2, #1
 800021e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000222:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000226:	f000 fc8d 	bl	8000b44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = motor_control_pin_2_Pin;
 800022a:	2301      	movs	r3, #1
 800022c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800022e:	2301      	movs	r3, #1
 8000230:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000232:	2300      	movs	r3, #0
 8000234:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000236:	2302      	movs	r3, #2
 8000238:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(motor_control_pin_2_GPIO_Port, &GPIO_InitStruct);
 800023a:	f107 030c 	add.w	r3, r7, #12
 800023e:	4619      	mov	r1, r3
 8000240:	480c      	ldr	r0, [pc, #48]	; (8000274 <MX_GPIO_Init+0xa8>)
 8000242:	f000 fb15 	bl	8000870 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = motor_control_pin_1_Pin;
 8000246:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800024a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800024c:	2301      	movs	r3, #1
 800024e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000250:	2300      	movs	r3, #0
 8000252:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000254:	2302      	movs	r3, #2
 8000256:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(motor_control_pin_1_GPIO_Port, &GPIO_InitStruct);
 8000258:	f107 030c 	add.w	r3, r7, #12
 800025c:	4619      	mov	r1, r3
 800025e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000262:	f000 fb05 	bl	8000870 <HAL_GPIO_Init>

}
 8000266:	bf00      	nop
 8000268:	3720      	adds	r7, #32
 800026a:	46bd      	mov	sp, r7
 800026c:	bd80      	pop	{r7, pc}
 800026e:	bf00      	nop
 8000270:	40021000 	.word	0x40021000
 8000274:	48000400 	.word	0x48000400

08000278 <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800027c:	4b1b      	ldr	r3, [pc, #108]	; (80002ec <MX_I2C3_Init+0x74>)
 800027e:	4a1c      	ldr	r2, [pc, #112]	; (80002f0 <MX_I2C3_Init+0x78>)
 8000280:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00707CBB;
 8000282:	4b1a      	ldr	r3, [pc, #104]	; (80002ec <MX_I2C3_Init+0x74>)
 8000284:	4a1b      	ldr	r2, [pc, #108]	; (80002f4 <MX_I2C3_Init+0x7c>)
 8000286:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000288:	4b18      	ldr	r3, [pc, #96]	; (80002ec <MX_I2C3_Init+0x74>)
 800028a:	2200      	movs	r2, #0
 800028c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800028e:	4b17      	ldr	r3, [pc, #92]	; (80002ec <MX_I2C3_Init+0x74>)
 8000290:	2201      	movs	r2, #1
 8000292:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000294:	4b15      	ldr	r3, [pc, #84]	; (80002ec <MX_I2C3_Init+0x74>)
 8000296:	2200      	movs	r2, #0
 8000298:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800029a:	4b14      	ldr	r3, [pc, #80]	; (80002ec <MX_I2C3_Init+0x74>)
 800029c:	2200      	movs	r2, #0
 800029e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80002a0:	4b12      	ldr	r3, [pc, #72]	; (80002ec <MX_I2C3_Init+0x74>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002a6:	4b11      	ldr	r3, [pc, #68]	; (80002ec <MX_I2C3_Init+0x74>)
 80002a8:	2200      	movs	r2, #0
 80002aa:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002ac:	4b0f      	ldr	r3, [pc, #60]	; (80002ec <MX_I2C3_Init+0x74>)
 80002ae:	2200      	movs	r2, #0
 80002b0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80002b2:	480e      	ldr	r0, [pc, #56]	; (80002ec <MX_I2C3_Init+0x74>)
 80002b4:	f000 fc5e 	bl	8000b74 <HAL_I2C_Init>
 80002b8:	4603      	mov	r3, r0
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d001      	beq.n	80002c2 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80002be:	f000 f8ee 	bl	800049e <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80002c2:	2100      	movs	r1, #0
 80002c4:	4809      	ldr	r0, [pc, #36]	; (80002ec <MX_I2C3_Init+0x74>)
 80002c6:	f000 fcf0 	bl	8000caa <HAL_I2CEx_ConfigAnalogFilter>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80002d0:	f000 f8e5 	bl	800049e <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80002d4:	2100      	movs	r1, #0
 80002d6:	4805      	ldr	r0, [pc, #20]	; (80002ec <MX_I2C3_Init+0x74>)
 80002d8:	f000 fd32 	bl	8000d40 <HAL_I2CEx_ConfigDigitalFilter>
 80002dc:	4603      	mov	r3, r0
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d001      	beq.n	80002e6 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80002e2:	f000 f8dc 	bl	800049e <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80002e6:	bf00      	nop
 80002e8:	bd80      	pop	{r7, pc}
 80002ea:	bf00      	nop
 80002ec:	20000028 	.word	0x20000028
 80002f0:	40005c00 	.word	0x40005c00
 80002f4:	00707cbb 	.word	0x00707cbb

080002f8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b0a0      	sub	sp, #128	; 0x80
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000300:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000304:	2200      	movs	r2, #0
 8000306:	601a      	str	r2, [r3, #0]
 8000308:	605a      	str	r2, [r3, #4]
 800030a:	609a      	str	r2, [r3, #8]
 800030c:	60da      	str	r2, [r3, #12]
 800030e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000310:	f107 0318 	add.w	r3, r7, #24
 8000314:	2254      	movs	r2, #84	; 0x54
 8000316:	2100      	movs	r1, #0
 8000318:	4618      	mov	r0, r3
 800031a:	f001 fea9 	bl	8002070 <memset>
  if(i2cHandle->Instance==I2C3)
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	681b      	ldr	r3, [r3, #0]
 8000322:	4a2d      	ldr	r2, [pc, #180]	; (80003d8 <HAL_I2C_MspInit+0xe0>)
 8000324:	4293      	cmp	r3, r2
 8000326:	d153      	bne.n	80003d0 <HAL_I2C_MspInit+0xd8>

  /* USER CODE END I2C3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8000328:	f44f 7380 	mov.w	r3, #256	; 0x100
 800032c:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800032e:	2300      	movs	r3, #0
 8000330:	64bb      	str	r3, [r7, #72]	; 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000332:	f107 0318 	add.w	r3, r7, #24
 8000336:	4618      	mov	r0, r3
 8000338:	f001 fbb2 	bl	8001aa0 <HAL_RCCEx_PeriphCLKConfig>
 800033c:	4603      	mov	r3, r0
 800033e:	2b00      	cmp	r3, #0
 8000340:	d001      	beq.n	8000346 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8000342:	f000 f8ac 	bl	800049e <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000346:	4b25      	ldr	r3, [pc, #148]	; (80003dc <HAL_I2C_MspInit+0xe4>)
 8000348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800034a:	4a24      	ldr	r2, [pc, #144]	; (80003dc <HAL_I2C_MspInit+0xe4>)
 800034c:	f043 0301 	orr.w	r3, r3, #1
 8000350:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000352:	4b22      	ldr	r3, [pc, #136]	; (80003dc <HAL_I2C_MspInit+0xe4>)
 8000354:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000356:	f003 0301 	and.w	r3, r3, #1
 800035a:	617b      	str	r3, [r7, #20]
 800035c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800035e:	4b1f      	ldr	r3, [pc, #124]	; (80003dc <HAL_I2C_MspInit+0xe4>)
 8000360:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000362:	4a1e      	ldr	r2, [pc, #120]	; (80003dc <HAL_I2C_MspInit+0xe4>)
 8000364:	f043 0302 	orr.w	r3, r3, #2
 8000368:	64d3      	str	r3, [r2, #76]	; 0x4c
 800036a:	4b1c      	ldr	r3, [pc, #112]	; (80003dc <HAL_I2C_MspInit+0xe4>)
 800036c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800036e:	f003 0302 	and.w	r3, r3, #2
 8000372:	613b      	str	r3, [r7, #16]
 8000374:	693b      	ldr	r3, [r7, #16]
    /**I2C3 GPIO Configuration
    PA7     ------> I2C3_SCL
    PB4 (NJTRST)     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000376:	2380      	movs	r3, #128	; 0x80
 8000378:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800037a:	2312      	movs	r3, #18
 800037c:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800037e:	2300      	movs	r3, #0
 8000380:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000382:	2303      	movs	r3, #3
 8000384:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000386:	2304      	movs	r3, #4
 8000388:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800038a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800038e:	4619      	mov	r1, r3
 8000390:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000394:	f000 fa6c 	bl	8000870 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000398:	2310      	movs	r3, #16
 800039a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800039c:	2312      	movs	r3, #18
 800039e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a0:	2300      	movs	r3, #0
 80003a2:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80003a4:	2303      	movs	r3, #3
 80003a6:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80003a8:	2304      	movs	r3, #4
 80003aa:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003ac:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80003b0:	4619      	mov	r1, r3
 80003b2:	480b      	ldr	r0, [pc, #44]	; (80003e0 <HAL_I2C_MspInit+0xe8>)
 80003b4:	f000 fa5c 	bl	8000870 <HAL_GPIO_Init>

    /* I2C3 clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80003b8:	4b08      	ldr	r3, [pc, #32]	; (80003dc <HAL_I2C_MspInit+0xe4>)
 80003ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003bc:	4a07      	ldr	r2, [pc, #28]	; (80003dc <HAL_I2C_MspInit+0xe4>)
 80003be:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80003c2:	6593      	str	r3, [r2, #88]	; 0x58
 80003c4:	4b05      	ldr	r3, [pc, #20]	; (80003dc <HAL_I2C_MspInit+0xe4>)
 80003c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80003c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80003cc:	60fb      	str	r3, [r7, #12]
 80003ce:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 80003d0:	bf00      	nop
 80003d2:	3780      	adds	r7, #128	; 0x80
 80003d4:	46bd      	mov	sp, r7
 80003d6:	bd80      	pop	{r7, pc}
 80003d8:	40005c00 	.word	0x40005c00
 80003dc:	40021000 	.word	0x40021000
 80003e0:	48000400 	.word	0x48000400

080003e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003e4:	b580      	push	{r7, lr}
 80003e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003e8:	f000 f8e7 	bl	80005ba <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003ec:	f000 f805 	bl	80003fa <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003f0:	f7ff feec 	bl	80001cc <MX_GPIO_Init>
  MX_I2C3_Init();
 80003f4:	f7ff ff40 	bl	8000278 <MX_I2C3_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80003f8:	e7fe      	b.n	80003f8 <main+0x14>

080003fa <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003fa:	b580      	push	{r7, lr}
 80003fc:	b096      	sub	sp, #88	; 0x58
 80003fe:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000400:	f107 0314 	add.w	r3, r7, #20
 8000404:	2244      	movs	r2, #68	; 0x44
 8000406:	2100      	movs	r1, #0
 8000408:	4618      	mov	r0, r3
 800040a:	f001 fe31 	bl	8002070 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800040e:	463b      	mov	r3, r7
 8000410:	2200      	movs	r2, #0
 8000412:	601a      	str	r2, [r3, #0]
 8000414:	605a      	str	r2, [r3, #4]
 8000416:	609a      	str	r2, [r3, #8]
 8000418:	60da      	str	r2, [r3, #12]
 800041a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800041c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000420:	f000 fce8 	bl	8000df4 <HAL_PWREx_ControlVoltageScaling>
 8000424:	4603      	mov	r3, r0
 8000426:	2b00      	cmp	r3, #0
 8000428:	d001      	beq.n	800042e <SystemClock_Config+0x34>
  {
    Error_Handler();
 800042a:	f000 f838 	bl	800049e <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800042e:	2310      	movs	r3, #16
 8000430:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000432:	2301      	movs	r3, #1
 8000434:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000436:	2300      	movs	r3, #0
 8000438:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800043a:	2360      	movs	r3, #96	; 0x60
 800043c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800043e:	2302      	movs	r3, #2
 8000440:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000442:	2301      	movs	r3, #1
 8000444:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000446:	2301      	movs	r3, #1
 8000448:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 800044a:	2310      	movs	r3, #16
 800044c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800044e:	2307      	movs	r3, #7
 8000450:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000452:	2302      	movs	r3, #2
 8000454:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000456:	2302      	movs	r3, #2
 8000458:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800045a:	f107 0314 	add.w	r3, r7, #20
 800045e:	4618      	mov	r0, r3
 8000460:	f000 fd1e 	bl	8000ea0 <HAL_RCC_OscConfig>
 8000464:	4603      	mov	r3, r0
 8000466:	2b00      	cmp	r3, #0
 8000468:	d001      	beq.n	800046e <SystemClock_Config+0x74>
  {
    Error_Handler();
 800046a:	f000 f818 	bl	800049e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800046e:	230f      	movs	r3, #15
 8000470:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000472:	2303      	movs	r3, #3
 8000474:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000476:	2300      	movs	r3, #0
 8000478:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800047a:	2300      	movs	r3, #0
 800047c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800047e:	2300      	movs	r3, #0
 8000480:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000482:	463b      	mov	r3, r7
 8000484:	2101      	movs	r1, #1
 8000486:	4618      	mov	r0, r3
 8000488:	f001 f91e 	bl	80016c8 <HAL_RCC_ClockConfig>
 800048c:	4603      	mov	r3, r0
 800048e:	2b00      	cmp	r3, #0
 8000490:	d001      	beq.n	8000496 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000492:	f000 f804 	bl	800049e <Error_Handler>
  }
}
 8000496:	bf00      	nop
 8000498:	3758      	adds	r7, #88	; 0x58
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}

0800049e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800049e:	b480      	push	{r7}
 80004a0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004a2:	b672      	cpsid	i
}
 80004a4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004a6:	e7fe      	b.n	80004a6 <Error_Handler+0x8>

080004a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	b083      	sub	sp, #12
 80004ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ae:	4b0f      	ldr	r3, [pc, #60]	; (80004ec <HAL_MspInit+0x44>)
 80004b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004b2:	4a0e      	ldr	r2, [pc, #56]	; (80004ec <HAL_MspInit+0x44>)
 80004b4:	f043 0301 	orr.w	r3, r3, #1
 80004b8:	6613      	str	r3, [r2, #96]	; 0x60
 80004ba:	4b0c      	ldr	r3, [pc, #48]	; (80004ec <HAL_MspInit+0x44>)
 80004bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80004be:	f003 0301 	and.w	r3, r3, #1
 80004c2:	607b      	str	r3, [r7, #4]
 80004c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004c6:	4b09      	ldr	r3, [pc, #36]	; (80004ec <HAL_MspInit+0x44>)
 80004c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004ca:	4a08      	ldr	r2, [pc, #32]	; (80004ec <HAL_MspInit+0x44>)
 80004cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004d0:	6593      	str	r3, [r2, #88]	; 0x58
 80004d2:	4b06      	ldr	r3, [pc, #24]	; (80004ec <HAL_MspInit+0x44>)
 80004d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80004d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004da:	603b      	str	r3, [r7, #0]
 80004dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004de:	bf00      	nop
 80004e0:	370c      	adds	r7, #12
 80004e2:	46bd      	mov	sp, r7
 80004e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop
 80004ec:	40021000 	.word	0x40021000

080004f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80004f0:	b480      	push	{r7}
 80004f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80004f4:	e7fe      	b.n	80004f4 <NMI_Handler+0x4>

080004f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80004f6:	b480      	push	{r7}
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80004fa:	e7fe      	b.n	80004fa <HardFault_Handler+0x4>

080004fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80004fc:	b480      	push	{r7}
 80004fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000500:	e7fe      	b.n	8000500 <MemManage_Handler+0x4>

08000502 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000502:	b480      	push	{r7}
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000506:	e7fe      	b.n	8000506 <BusFault_Handler+0x4>

08000508 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800050c:	e7fe      	b.n	800050c <UsageFault_Handler+0x4>

0800050e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800050e:	b480      	push	{r7}
 8000510:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000512:	bf00      	nop
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr

0800051c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000520:	bf00      	nop
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr

0800052a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800052a:	b480      	push	{r7}
 800052c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800052e:	bf00      	nop
 8000530:	46bd      	mov	sp, r7
 8000532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000536:	4770      	bx	lr

08000538 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800053c:	f000 f892 	bl	8000664 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000540:	bf00      	nop
 8000542:	bd80      	pop	{r7, pc}

08000544 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000548:	4b06      	ldr	r3, [pc, #24]	; (8000564 <SystemInit+0x20>)
 800054a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800054e:	4a05      	ldr	r2, [pc, #20]	; (8000564 <SystemInit+0x20>)
 8000550:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000554:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000558:	bf00      	nop
 800055a:	46bd      	mov	sp, r7
 800055c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000560:	4770      	bx	lr
 8000562:	bf00      	nop
 8000564:	e000ed00 	.word	0xe000ed00

08000568 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000568:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005a0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800056c:	f7ff ffea 	bl	8000544 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000570:	480c      	ldr	r0, [pc, #48]	; (80005a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000572:	490d      	ldr	r1, [pc, #52]	; (80005a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000574:	4a0d      	ldr	r2, [pc, #52]	; (80005ac <LoopForever+0xe>)
  movs r3, #0
 8000576:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000578:	e002      	b.n	8000580 <LoopCopyDataInit>

0800057a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800057a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800057c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800057e:	3304      	adds	r3, #4

08000580 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000580:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000582:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000584:	d3f9      	bcc.n	800057a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000586:	4a0a      	ldr	r2, [pc, #40]	; (80005b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000588:	4c0a      	ldr	r4, [pc, #40]	; (80005b4 <LoopForever+0x16>)
  movs r3, #0
 800058a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800058c:	e001      	b.n	8000592 <LoopFillZerobss>

0800058e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800058e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000590:	3204      	adds	r2, #4

08000592 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000592:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000594:	d3fb      	bcc.n	800058e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000596:	f001 fd73 	bl	8002080 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800059a:	f7ff ff23 	bl	80003e4 <main>

0800059e <LoopForever>:

LoopForever:
    b LoopForever
 800059e:	e7fe      	b.n	800059e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80005a0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80005a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005a8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80005ac:	08002128 	.word	0x08002128
  ldr r2, =_sbss
 80005b0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80005b4:	20000080 	.word	0x20000080

080005b8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005b8:	e7fe      	b.n	80005b8 <ADC1_IRQHandler>

080005ba <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80005ba:	b580      	push	{r7, lr}
 80005bc:	b082      	sub	sp, #8
 80005be:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80005c0:	2300      	movs	r3, #0
 80005c2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005c4:	2003      	movs	r0, #3
 80005c6:	f000 f91f 	bl	8000808 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80005ca:	2000      	movs	r0, #0
 80005cc:	f000 f80e 	bl	80005ec <HAL_InitTick>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d002      	beq.n	80005dc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80005d6:	2301      	movs	r3, #1
 80005d8:	71fb      	strb	r3, [r7, #7]
 80005da:	e001      	b.n	80005e0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80005dc:	f7ff ff64 	bl	80004a8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80005e0:	79fb      	ldrb	r3, [r7, #7]
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
	...

080005ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80005f4:	2300      	movs	r3, #0
 80005f6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80005f8:	4b17      	ldr	r3, [pc, #92]	; (8000658 <HAL_InitTick+0x6c>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d023      	beq.n	8000648 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000600:	4b16      	ldr	r3, [pc, #88]	; (800065c <HAL_InitTick+0x70>)
 8000602:	681a      	ldr	r2, [r3, #0]
 8000604:	4b14      	ldr	r3, [pc, #80]	; (8000658 <HAL_InitTick+0x6c>)
 8000606:	781b      	ldrb	r3, [r3, #0]
 8000608:	4619      	mov	r1, r3
 800060a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800060e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000612:	fbb2 f3f3 	udiv	r3, r2, r3
 8000616:	4618      	mov	r0, r3
 8000618:	f000 f91d 	bl	8000856 <HAL_SYSTICK_Config>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d10f      	bne.n	8000642 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	2b0f      	cmp	r3, #15
 8000626:	d809      	bhi.n	800063c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000628:	2200      	movs	r2, #0
 800062a:	6879      	ldr	r1, [r7, #4]
 800062c:	f04f 30ff 	mov.w	r0, #4294967295
 8000630:	f000 f8f5 	bl	800081e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000634:	4a0a      	ldr	r2, [pc, #40]	; (8000660 <HAL_InitTick+0x74>)
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	6013      	str	r3, [r2, #0]
 800063a:	e007      	b.n	800064c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 800063c:	2301      	movs	r3, #1
 800063e:	73fb      	strb	r3, [r7, #15]
 8000640:	e004      	b.n	800064c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000642:	2301      	movs	r3, #1
 8000644:	73fb      	strb	r3, [r7, #15]
 8000646:	e001      	b.n	800064c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000648:	2301      	movs	r3, #1
 800064a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800064c:	7bfb      	ldrb	r3, [r7, #15]
}
 800064e:	4618      	mov	r0, r3
 8000650:	3710      	adds	r7, #16
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	20000008 	.word	0x20000008
 800065c:	20000000 	.word	0x20000000
 8000660:	20000004 	.word	0x20000004

08000664 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000668:	4b06      	ldr	r3, [pc, #24]	; (8000684 <HAL_IncTick+0x20>)
 800066a:	781b      	ldrb	r3, [r3, #0]
 800066c:	461a      	mov	r2, r3
 800066e:	4b06      	ldr	r3, [pc, #24]	; (8000688 <HAL_IncTick+0x24>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4413      	add	r3, r2
 8000674:	4a04      	ldr	r2, [pc, #16]	; (8000688 <HAL_IncTick+0x24>)
 8000676:	6013      	str	r3, [r2, #0]
}
 8000678:	bf00      	nop
 800067a:	46bd      	mov	sp, r7
 800067c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000680:	4770      	bx	lr
 8000682:	bf00      	nop
 8000684:	20000008 	.word	0x20000008
 8000688:	2000007c 	.word	0x2000007c

0800068c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  return uwTick;
 8000690:	4b03      	ldr	r3, [pc, #12]	; (80006a0 <HAL_GetTick+0x14>)
 8000692:	681b      	ldr	r3, [r3, #0]
}
 8000694:	4618      	mov	r0, r3
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	2000007c 	.word	0x2000007c

080006a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b085      	sub	sp, #20
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	f003 0307 	and.w	r3, r3, #7
 80006b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006b4:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <__NVIC_SetPriorityGrouping+0x44>)
 80006b6:	68db      	ldr	r3, [r3, #12]
 80006b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006ba:	68ba      	ldr	r2, [r7, #8]
 80006bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80006c0:	4013      	ands	r3, r2
 80006c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006d6:	4a04      	ldr	r2, [pc, #16]	; (80006e8 <__NVIC_SetPriorityGrouping+0x44>)
 80006d8:	68bb      	ldr	r3, [r7, #8]
 80006da:	60d3      	str	r3, [r2, #12]
}
 80006dc:	bf00      	nop
 80006de:	3714      	adds	r7, #20
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr
 80006e8:	e000ed00 	.word	0xe000ed00

080006ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006ec:	b480      	push	{r7}
 80006ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006f0:	4b04      	ldr	r3, [pc, #16]	; (8000704 <__NVIC_GetPriorityGrouping+0x18>)
 80006f2:	68db      	ldr	r3, [r3, #12]
 80006f4:	0a1b      	lsrs	r3, r3, #8
 80006f6:	f003 0307 	and.w	r3, r3, #7
}
 80006fa:	4618      	mov	r0, r3
 80006fc:	46bd      	mov	sp, r7
 80006fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000702:	4770      	bx	lr
 8000704:	e000ed00 	.word	0xe000ed00

08000708 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	6039      	str	r1, [r7, #0]
 8000712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000718:	2b00      	cmp	r3, #0
 800071a:	db0a      	blt.n	8000732 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800071c:	683b      	ldr	r3, [r7, #0]
 800071e:	b2da      	uxtb	r2, r3
 8000720:	490c      	ldr	r1, [pc, #48]	; (8000754 <__NVIC_SetPriority+0x4c>)
 8000722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000726:	0112      	lsls	r2, r2, #4
 8000728:	b2d2      	uxtb	r2, r2
 800072a:	440b      	add	r3, r1
 800072c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000730:	e00a      	b.n	8000748 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	b2da      	uxtb	r2, r3
 8000736:	4908      	ldr	r1, [pc, #32]	; (8000758 <__NVIC_SetPriority+0x50>)
 8000738:	79fb      	ldrb	r3, [r7, #7]
 800073a:	f003 030f 	and.w	r3, r3, #15
 800073e:	3b04      	subs	r3, #4
 8000740:	0112      	lsls	r2, r2, #4
 8000742:	b2d2      	uxtb	r2, r2
 8000744:	440b      	add	r3, r1
 8000746:	761a      	strb	r2, [r3, #24]
}
 8000748:	bf00      	nop
 800074a:	370c      	adds	r7, #12
 800074c:	46bd      	mov	sp, r7
 800074e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000752:	4770      	bx	lr
 8000754:	e000e100 	.word	0xe000e100
 8000758:	e000ed00 	.word	0xe000ed00

0800075c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800075c:	b480      	push	{r7}
 800075e:	b089      	sub	sp, #36	; 0x24
 8000760:	af00      	add	r7, sp, #0
 8000762:	60f8      	str	r0, [r7, #12]
 8000764:	60b9      	str	r1, [r7, #8]
 8000766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000768:	68fb      	ldr	r3, [r7, #12]
 800076a:	f003 0307 	and.w	r3, r3, #7
 800076e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000770:	69fb      	ldr	r3, [r7, #28]
 8000772:	f1c3 0307 	rsb	r3, r3, #7
 8000776:	2b04      	cmp	r3, #4
 8000778:	bf28      	it	cs
 800077a:	2304      	movcs	r3, #4
 800077c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800077e:	69fb      	ldr	r3, [r7, #28]
 8000780:	3304      	adds	r3, #4
 8000782:	2b06      	cmp	r3, #6
 8000784:	d902      	bls.n	800078c <NVIC_EncodePriority+0x30>
 8000786:	69fb      	ldr	r3, [r7, #28]
 8000788:	3b03      	subs	r3, #3
 800078a:	e000      	b.n	800078e <NVIC_EncodePriority+0x32>
 800078c:	2300      	movs	r3, #0
 800078e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000790:	f04f 32ff 	mov.w	r2, #4294967295
 8000794:	69bb      	ldr	r3, [r7, #24]
 8000796:	fa02 f303 	lsl.w	r3, r2, r3
 800079a:	43da      	mvns	r2, r3
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	401a      	ands	r2, r3
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007a4:	f04f 31ff 	mov.w	r1, #4294967295
 80007a8:	697b      	ldr	r3, [r7, #20]
 80007aa:	fa01 f303 	lsl.w	r3, r1, r3
 80007ae:	43d9      	mvns	r1, r3
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007b4:	4313      	orrs	r3, r2
         );
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	3724      	adds	r7, #36	; 0x24
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
	...

080007c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b082      	sub	sp, #8
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	3b01      	subs	r3, #1
 80007d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007d4:	d301      	bcc.n	80007da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007d6:	2301      	movs	r3, #1
 80007d8:	e00f      	b.n	80007fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007da:	4a0a      	ldr	r2, [pc, #40]	; (8000804 <SysTick_Config+0x40>)
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	3b01      	subs	r3, #1
 80007e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007e2:	210f      	movs	r1, #15
 80007e4:	f04f 30ff 	mov.w	r0, #4294967295
 80007e8:	f7ff ff8e 	bl	8000708 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007ec:	4b05      	ldr	r3, [pc, #20]	; (8000804 <SysTick_Config+0x40>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007f2:	4b04      	ldr	r3, [pc, #16]	; (8000804 <SysTick_Config+0x40>)
 80007f4:	2207      	movs	r2, #7
 80007f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80007f8:	2300      	movs	r3, #0
}
 80007fa:	4618      	mov	r0, r3
 80007fc:	3708      	adds	r7, #8
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	e000e010 	.word	0xe000e010

08000808 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000810:	6878      	ldr	r0, [r7, #4]
 8000812:	f7ff ff47 	bl	80006a4 <__NVIC_SetPriorityGrouping>
}
 8000816:	bf00      	nop
 8000818:	3708      	adds	r7, #8
 800081a:	46bd      	mov	sp, r7
 800081c:	bd80      	pop	{r7, pc}

0800081e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800081e:	b580      	push	{r7, lr}
 8000820:	b086      	sub	sp, #24
 8000822:	af00      	add	r7, sp, #0
 8000824:	4603      	mov	r3, r0
 8000826:	60b9      	str	r1, [r7, #8]
 8000828:	607a      	str	r2, [r7, #4]
 800082a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800082c:	2300      	movs	r3, #0
 800082e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000830:	f7ff ff5c 	bl	80006ec <__NVIC_GetPriorityGrouping>
 8000834:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000836:	687a      	ldr	r2, [r7, #4]
 8000838:	68b9      	ldr	r1, [r7, #8]
 800083a:	6978      	ldr	r0, [r7, #20]
 800083c:	f7ff ff8e 	bl	800075c <NVIC_EncodePriority>
 8000840:	4602      	mov	r2, r0
 8000842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000846:	4611      	mov	r1, r2
 8000848:	4618      	mov	r0, r3
 800084a:	f7ff ff5d 	bl	8000708 <__NVIC_SetPriority>
}
 800084e:	bf00      	nop
 8000850:	3718      	adds	r7, #24
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}

08000856 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000856:	b580      	push	{r7, lr}
 8000858:	b082      	sub	sp, #8
 800085a:	af00      	add	r7, sp, #0
 800085c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800085e:	6878      	ldr	r0, [r7, #4]
 8000860:	f7ff ffb0 	bl	80007c4 <SysTick_Config>
 8000864:	4603      	mov	r3, r0
}
 8000866:	4618      	mov	r0, r3
 8000868:	3708      	adds	r7, #8
 800086a:	46bd      	mov	sp, r7
 800086c:	bd80      	pop	{r7, pc}
	...

08000870 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000870:	b480      	push	{r7}
 8000872:	b087      	sub	sp, #28
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800087a:	2300      	movs	r3, #0
 800087c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800087e:	e148      	b.n	8000b12 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000880:	683b      	ldr	r3, [r7, #0]
 8000882:	681a      	ldr	r2, [r3, #0]
 8000884:	2101      	movs	r1, #1
 8000886:	697b      	ldr	r3, [r7, #20]
 8000888:	fa01 f303 	lsl.w	r3, r1, r3
 800088c:	4013      	ands	r3, r2
 800088e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	2b00      	cmp	r3, #0
 8000894:	f000 813a 	beq.w	8000b0c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000898:	683b      	ldr	r3, [r7, #0]
 800089a:	685b      	ldr	r3, [r3, #4]
 800089c:	f003 0303 	and.w	r3, r3, #3
 80008a0:	2b01      	cmp	r3, #1
 80008a2:	d005      	beq.n	80008b0 <HAL_GPIO_Init+0x40>
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	685b      	ldr	r3, [r3, #4]
 80008a8:	f003 0303 	and.w	r3, r3, #3
 80008ac:	2b02      	cmp	r3, #2
 80008ae:	d130      	bne.n	8000912 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	689b      	ldr	r3, [r3, #8]
 80008b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80008b6:	697b      	ldr	r3, [r7, #20]
 80008b8:	005b      	lsls	r3, r3, #1
 80008ba:	2203      	movs	r2, #3
 80008bc:	fa02 f303 	lsl.w	r3, r2, r3
 80008c0:	43db      	mvns	r3, r3
 80008c2:	693a      	ldr	r2, [r7, #16]
 80008c4:	4013      	ands	r3, r2
 80008c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80008c8:	683b      	ldr	r3, [r7, #0]
 80008ca:	68da      	ldr	r2, [r3, #12]
 80008cc:	697b      	ldr	r3, [r7, #20]
 80008ce:	005b      	lsls	r3, r3, #1
 80008d0:	fa02 f303 	lsl.w	r3, r2, r3
 80008d4:	693a      	ldr	r2, [r7, #16]
 80008d6:	4313      	orrs	r3, r2
 80008d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	693a      	ldr	r2, [r7, #16]
 80008de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	685b      	ldr	r3, [r3, #4]
 80008e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80008e6:	2201      	movs	r2, #1
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	fa02 f303 	lsl.w	r3, r2, r3
 80008ee:	43db      	mvns	r3, r3
 80008f0:	693a      	ldr	r2, [r7, #16]
 80008f2:	4013      	ands	r3, r2
 80008f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	685b      	ldr	r3, [r3, #4]
 80008fa:	091b      	lsrs	r3, r3, #4
 80008fc:	f003 0201 	and.w	r2, r3, #1
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	fa02 f303 	lsl.w	r3, r2, r3
 8000906:	693a      	ldr	r2, [r7, #16]
 8000908:	4313      	orrs	r3, r2
 800090a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	693a      	ldr	r2, [r7, #16]
 8000910:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000912:	683b      	ldr	r3, [r7, #0]
 8000914:	685b      	ldr	r3, [r3, #4]
 8000916:	f003 0303 	and.w	r3, r3, #3
 800091a:	2b03      	cmp	r3, #3
 800091c:	d017      	beq.n	800094e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	68db      	ldr	r3, [r3, #12]
 8000922:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	005b      	lsls	r3, r3, #1
 8000928:	2203      	movs	r2, #3
 800092a:	fa02 f303 	lsl.w	r3, r2, r3
 800092e:	43db      	mvns	r3, r3
 8000930:	693a      	ldr	r2, [r7, #16]
 8000932:	4013      	ands	r3, r2
 8000934:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	689a      	ldr	r2, [r3, #8]
 800093a:	697b      	ldr	r3, [r7, #20]
 800093c:	005b      	lsls	r3, r3, #1
 800093e:	fa02 f303 	lsl.w	r3, r2, r3
 8000942:	693a      	ldr	r2, [r7, #16]
 8000944:	4313      	orrs	r3, r2
 8000946:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	693a      	ldr	r2, [r7, #16]
 800094c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800094e:	683b      	ldr	r3, [r7, #0]
 8000950:	685b      	ldr	r3, [r3, #4]
 8000952:	f003 0303 	and.w	r3, r3, #3
 8000956:	2b02      	cmp	r3, #2
 8000958:	d123      	bne.n	80009a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800095a:	697b      	ldr	r3, [r7, #20]
 800095c:	08da      	lsrs	r2, r3, #3
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	3208      	adds	r2, #8
 8000962:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000966:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000968:	697b      	ldr	r3, [r7, #20]
 800096a:	f003 0307 	and.w	r3, r3, #7
 800096e:	009b      	lsls	r3, r3, #2
 8000970:	220f      	movs	r2, #15
 8000972:	fa02 f303 	lsl.w	r3, r2, r3
 8000976:	43db      	mvns	r3, r3
 8000978:	693a      	ldr	r2, [r7, #16]
 800097a:	4013      	ands	r3, r2
 800097c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	691a      	ldr	r2, [r3, #16]
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	f003 0307 	and.w	r3, r3, #7
 8000988:	009b      	lsls	r3, r3, #2
 800098a:	fa02 f303 	lsl.w	r3, r2, r3
 800098e:	693a      	ldr	r2, [r7, #16]
 8000990:	4313      	orrs	r3, r2
 8000992:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000994:	697b      	ldr	r3, [r7, #20]
 8000996:	08da      	lsrs	r2, r3, #3
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	3208      	adds	r2, #8
 800099c:	6939      	ldr	r1, [r7, #16]
 800099e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80009a8:	697b      	ldr	r3, [r7, #20]
 80009aa:	005b      	lsls	r3, r3, #1
 80009ac:	2203      	movs	r2, #3
 80009ae:	fa02 f303 	lsl.w	r3, r2, r3
 80009b2:	43db      	mvns	r3, r3
 80009b4:	693a      	ldr	r2, [r7, #16]
 80009b6:	4013      	ands	r3, r2
 80009b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	685b      	ldr	r3, [r3, #4]
 80009be:	f003 0203 	and.w	r2, r3, #3
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	005b      	lsls	r3, r3, #1
 80009c6:	fa02 f303 	lsl.w	r3, r2, r3
 80009ca:	693a      	ldr	r2, [r7, #16]
 80009cc:	4313      	orrs	r3, r2
 80009ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	693a      	ldr	r2, [r7, #16]
 80009d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80009de:	2b00      	cmp	r3, #0
 80009e0:	f000 8094 	beq.w	8000b0c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009e4:	4b52      	ldr	r3, [pc, #328]	; (8000b30 <HAL_GPIO_Init+0x2c0>)
 80009e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009e8:	4a51      	ldr	r2, [pc, #324]	; (8000b30 <HAL_GPIO_Init+0x2c0>)
 80009ea:	f043 0301 	orr.w	r3, r3, #1
 80009ee:	6613      	str	r3, [r2, #96]	; 0x60
 80009f0:	4b4f      	ldr	r3, [pc, #316]	; (8000b30 <HAL_GPIO_Init+0x2c0>)
 80009f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009f4:	f003 0301 	and.w	r3, r3, #1
 80009f8:	60bb      	str	r3, [r7, #8]
 80009fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80009fc:	4a4d      	ldr	r2, [pc, #308]	; (8000b34 <HAL_GPIO_Init+0x2c4>)
 80009fe:	697b      	ldr	r3, [r7, #20]
 8000a00:	089b      	lsrs	r3, r3, #2
 8000a02:	3302      	adds	r3, #2
 8000a04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	f003 0303 	and.w	r3, r3, #3
 8000a10:	009b      	lsls	r3, r3, #2
 8000a12:	220f      	movs	r2, #15
 8000a14:	fa02 f303 	lsl.w	r3, r2, r3
 8000a18:	43db      	mvns	r3, r3
 8000a1a:	693a      	ldr	r2, [r7, #16]
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000a26:	d00d      	beq.n	8000a44 <HAL_GPIO_Init+0x1d4>
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	4a43      	ldr	r2, [pc, #268]	; (8000b38 <HAL_GPIO_Init+0x2c8>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d007      	beq.n	8000a40 <HAL_GPIO_Init+0x1d0>
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4a42      	ldr	r2, [pc, #264]	; (8000b3c <HAL_GPIO_Init+0x2cc>)
 8000a34:	4293      	cmp	r3, r2
 8000a36:	d101      	bne.n	8000a3c <HAL_GPIO_Init+0x1cc>
 8000a38:	2302      	movs	r3, #2
 8000a3a:	e004      	b.n	8000a46 <HAL_GPIO_Init+0x1d6>
 8000a3c:	2307      	movs	r3, #7
 8000a3e:	e002      	b.n	8000a46 <HAL_GPIO_Init+0x1d6>
 8000a40:	2301      	movs	r3, #1
 8000a42:	e000      	b.n	8000a46 <HAL_GPIO_Init+0x1d6>
 8000a44:	2300      	movs	r3, #0
 8000a46:	697a      	ldr	r2, [r7, #20]
 8000a48:	f002 0203 	and.w	r2, r2, #3
 8000a4c:	0092      	lsls	r2, r2, #2
 8000a4e:	4093      	lsls	r3, r2
 8000a50:	693a      	ldr	r2, [r7, #16]
 8000a52:	4313      	orrs	r3, r2
 8000a54:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000a56:	4937      	ldr	r1, [pc, #220]	; (8000b34 <HAL_GPIO_Init+0x2c4>)
 8000a58:	697b      	ldr	r3, [r7, #20]
 8000a5a:	089b      	lsrs	r3, r3, #2
 8000a5c:	3302      	adds	r3, #2
 8000a5e:	693a      	ldr	r2, [r7, #16]
 8000a60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000a64:	4b36      	ldr	r3, [pc, #216]	; (8000b40 <HAL_GPIO_Init+0x2d0>)
 8000a66:	689b      	ldr	r3, [r3, #8]
 8000a68:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	43db      	mvns	r3, r3
 8000a6e:	693a      	ldr	r2, [r7, #16]
 8000a70:	4013      	ands	r3, r2
 8000a72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000a74:	683b      	ldr	r3, [r7, #0]
 8000a76:	685b      	ldr	r3, [r3, #4]
 8000a78:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d003      	beq.n	8000a88 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000a80:	693a      	ldr	r2, [r7, #16]
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000a88:	4a2d      	ldr	r2, [pc, #180]	; (8000b40 <HAL_GPIO_Init+0x2d0>)
 8000a8a:	693b      	ldr	r3, [r7, #16]
 8000a8c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000a8e:	4b2c      	ldr	r3, [pc, #176]	; (8000b40 <HAL_GPIO_Init+0x2d0>)
 8000a90:	68db      	ldr	r3, [r3, #12]
 8000a92:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	43db      	mvns	r3, r3
 8000a98:	693a      	ldr	r2, [r7, #16]
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	685b      	ldr	r3, [r3, #4]
 8000aa2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d003      	beq.n	8000ab2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000aaa:	693a      	ldr	r2, [r7, #16]
 8000aac:	68fb      	ldr	r3, [r7, #12]
 8000aae:	4313      	orrs	r3, r2
 8000ab0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000ab2:	4a23      	ldr	r2, [pc, #140]	; (8000b40 <HAL_GPIO_Init+0x2d0>)
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000ab8:	4b21      	ldr	r3, [pc, #132]	; (8000b40 <HAL_GPIO_Init+0x2d0>)
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000abe:	68fb      	ldr	r3, [r7, #12]
 8000ac0:	43db      	mvns	r3, r3
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	685b      	ldr	r3, [r3, #4]
 8000acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d003      	beq.n	8000adc <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000ad4:	693a      	ldr	r2, [r7, #16]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000adc:	4a18      	ldr	r2, [pc, #96]	; (8000b40 <HAL_GPIO_Init+0x2d0>)
 8000ade:	693b      	ldr	r3, [r7, #16]
 8000ae0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000ae2:	4b17      	ldr	r3, [pc, #92]	; (8000b40 <HAL_GPIO_Init+0x2d0>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	43db      	mvns	r3, r3
 8000aec:	693a      	ldr	r2, [r7, #16]
 8000aee:	4013      	ands	r3, r2
 8000af0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000af2:	683b      	ldr	r3, [r7, #0]
 8000af4:	685b      	ldr	r3, [r3, #4]
 8000af6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d003      	beq.n	8000b06 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000afe:	693a      	ldr	r2, [r7, #16]
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	4313      	orrs	r3, r2
 8000b04:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000b06:	4a0e      	ldr	r2, [pc, #56]	; (8000b40 <HAL_GPIO_Init+0x2d0>)
 8000b08:	693b      	ldr	r3, [r7, #16]
 8000b0a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	681a      	ldr	r2, [r3, #0]
 8000b16:	697b      	ldr	r3, [r7, #20]
 8000b18:	fa22 f303 	lsr.w	r3, r2, r3
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	f47f aeaf 	bne.w	8000880 <HAL_GPIO_Init+0x10>
  }
}
 8000b22:	bf00      	nop
 8000b24:	bf00      	nop
 8000b26:	371c      	adds	r7, #28
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr
 8000b30:	40021000 	.word	0x40021000
 8000b34:	40010000 	.word	0x40010000
 8000b38:	48000400 	.word	0x48000400
 8000b3c:	48000800 	.word	0x48000800
 8000b40:	40010400 	.word	0x40010400

08000b44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	460b      	mov	r3, r1
 8000b4e:	807b      	strh	r3, [r7, #2]
 8000b50:	4613      	mov	r3, r2
 8000b52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b54:	787b      	ldrb	r3, [r7, #1]
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d003      	beq.n	8000b62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000b5a:	887a      	ldrh	r2, [r7, #2]
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000b60:	e002      	b.n	8000b68 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000b62:	887a      	ldrh	r2, [r7, #2]
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000b68:	bf00      	nop
 8000b6a:	370c      	adds	r7, #12
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b72:	4770      	bx	lr

08000b74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d101      	bne.n	8000b86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000b82:	2301      	movs	r3, #1
 8000b84:	e08d      	b.n	8000ca2 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000b8c:	b2db      	uxtb	r3, r3
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d106      	bne.n	8000ba0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	2200      	movs	r2, #0
 8000b96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f7ff fbac 	bl	80002f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2224      	movs	r2, #36	; 0x24
 8000ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	f022 0201 	bic.w	r2, r2, #1
 8000bb6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	685a      	ldr	r2, [r3, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000bc4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	681b      	ldr	r3, [r3, #0]
 8000bca:	689a      	ldr	r2, [r3, #8]
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000bd4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	68db      	ldr	r3, [r3, #12]
 8000bda:	2b01      	cmp	r3, #1
 8000bdc:	d107      	bne.n	8000bee <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	689a      	ldr	r2, [r3, #8]
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	e006      	b.n	8000bfc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	689a      	ldr	r2, [r3, #8]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000bfa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	68db      	ldr	r3, [r3, #12]
 8000c00:	2b02      	cmp	r3, #2
 8000c02:	d108      	bne.n	8000c16 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	685a      	ldr	r2, [r3, #4]
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000c12:	605a      	str	r2, [r3, #4]
 8000c14:	e007      	b.n	8000c26 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	685a      	ldr	r2, [r3, #4]
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000c24:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	685b      	ldr	r3, [r3, #4]
 8000c2c:	687a      	ldr	r2, [r7, #4]
 8000c2e:	6812      	ldr	r2, [r2, #0]
 8000c30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c34:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c38:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	68da      	ldr	r2, [r3, #12]
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000c48:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	691a      	ldr	r2, [r3, #16]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	695b      	ldr	r3, [r3, #20]
 8000c52:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	699b      	ldr	r3, [r3, #24]
 8000c5a:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	430a      	orrs	r2, r1
 8000c62:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	69d9      	ldr	r1, [r3, #28]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	6a1a      	ldr	r2, [r3, #32]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	430a      	orrs	r2, r1
 8000c72:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	681a      	ldr	r2, [r3, #0]
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	f042 0201 	orr.w	r2, r2, #1
 8000c82:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	2200      	movs	r2, #0
 8000c88:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2220      	movs	r2, #32
 8000c8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2200      	movs	r2, #0
 8000c96:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000ca0:	2300      	movs	r3, #0
}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}

08000caa <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000caa:	b480      	push	{r7}
 8000cac:	b083      	sub	sp, #12
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	6078      	str	r0, [r7, #4]
 8000cb2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	2b20      	cmp	r3, #32
 8000cbe:	d138      	bne.n	8000d32 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000cc6:	2b01      	cmp	r3, #1
 8000cc8:	d101      	bne.n	8000cce <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000cca:	2302      	movs	r3, #2
 8000ccc:	e032      	b.n	8000d34 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	2224      	movs	r2, #36	; 0x24
 8000cda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f022 0201 	bic.w	r2, r2, #1
 8000cec:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	681a      	ldr	r2, [r3, #0]
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000cfc:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	6819      	ldr	r1, [r3, #0]
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	683a      	ldr	r2, [r7, #0]
 8000d0a:	430a      	orrs	r2, r1
 8000d0c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f042 0201 	orr.w	r2, r2, #1
 8000d1c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	2220      	movs	r2, #32
 8000d22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2200      	movs	r2, #0
 8000d2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	e000      	b.n	8000d34 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8000d32:	2302      	movs	r3, #2
  }
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	370c      	adds	r7, #12
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3e:	4770      	bx	lr

08000d40 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b085      	sub	sp, #20
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000d50:	b2db      	uxtb	r3, r3
 8000d52:	2b20      	cmp	r3, #32
 8000d54:	d139      	bne.n	8000dca <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000d5c:	2b01      	cmp	r3, #1
 8000d5e:	d101      	bne.n	8000d64 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8000d60:	2302      	movs	r3, #2
 8000d62:	e033      	b.n	8000dcc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	2201      	movs	r2, #1
 8000d68:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	2224      	movs	r2, #36	; 0x24
 8000d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	681a      	ldr	r2, [r3, #0]
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	f022 0201 	bic.w	r2, r2, #1
 8000d82:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000d8c:	68fb      	ldr	r3, [r7, #12]
 8000d8e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000d92:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000d94:	683b      	ldr	r3, [r7, #0]
 8000d96:	021b      	lsls	r3, r3, #8
 8000d98:	68fa      	ldr	r2, [r7, #12]
 8000d9a:	4313      	orrs	r3, r2
 8000d9c:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	68fa      	ldr	r2, [r7, #12]
 8000da4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	f042 0201 	orr.w	r2, r2, #1
 8000db4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	2220      	movs	r2, #32
 8000dba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	e000      	b.n	8000dcc <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8000dca:	2302      	movs	r3, #2
  }
}
 8000dcc:	4618      	mov	r0, r3
 8000dce:	3714      	adds	r7, #20
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000ddc:	4b04      	ldr	r3, [pc, #16]	; (8000df0 <HAL_PWREx_GetVoltageRange+0x18>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	40007000 	.word	0x40007000

08000df4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e02:	d130      	bne.n	8000e66 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000e04:	4b23      	ldr	r3, [pc, #140]	; (8000e94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000e10:	d038      	beq.n	8000e84 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e12:	4b20      	ldr	r3, [pc, #128]	; (8000e94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e1a:	4a1e      	ldr	r2, [pc, #120]	; (8000e94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e1c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e20:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000e22:	4b1d      	ldr	r3, [pc, #116]	; (8000e98 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	2232      	movs	r2, #50	; 0x32
 8000e28:	fb02 f303 	mul.w	r3, r2, r3
 8000e2c:	4a1b      	ldr	r2, [pc, #108]	; (8000e9c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000e2e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e32:	0c9b      	lsrs	r3, r3, #18
 8000e34:	3301      	adds	r3, #1
 8000e36:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e38:	e002      	b.n	8000e40 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	3b01      	subs	r3, #1
 8000e3e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000e40:	4b14      	ldr	r3, [pc, #80]	; (8000e94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e42:	695b      	ldr	r3, [r3, #20]
 8000e44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e4c:	d102      	bne.n	8000e54 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000e4e:	68fb      	ldr	r3, [r7, #12]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d1f2      	bne.n	8000e3a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000e54:	4b0f      	ldr	r3, [pc, #60]	; (8000e94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e56:	695b      	ldr	r3, [r3, #20]
 8000e58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e60:	d110      	bne.n	8000e84 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000e62:	2303      	movs	r3, #3
 8000e64:	e00f      	b.n	8000e86 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000e66:	4b0b      	ldr	r3, [pc, #44]	; (8000e94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000e6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e72:	d007      	beq.n	8000e84 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e74:	4b07      	ldr	r3, [pc, #28]	; (8000e94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000e7c:	4a05      	ldr	r2, [pc, #20]	; (8000e94 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000e7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e82:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000e84:	2300      	movs	r3, #0
}
 8000e86:	4618      	mov	r0, r3
 8000e88:	3714      	adds	r7, #20
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	40007000 	.word	0x40007000
 8000e98:	20000000 	.word	0x20000000
 8000e9c:	431bde83 	.word	0x431bde83

08000ea0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b088      	sub	sp, #32
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d102      	bne.n	8000eb4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	f000 bc02 	b.w	80016b8 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000eb4:	4b96      	ldr	r3, [pc, #600]	; (8001110 <HAL_RCC_OscConfig+0x270>)
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	f003 030c 	and.w	r3, r3, #12
 8000ebc:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000ebe:	4b94      	ldr	r3, [pc, #592]	; (8001110 <HAL_RCC_OscConfig+0x270>)
 8000ec0:	68db      	ldr	r3, [r3, #12]
 8000ec2:	f003 0303 	and.w	r3, r3, #3
 8000ec6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f003 0310 	and.w	r3, r3, #16
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	f000 80e4 	beq.w	800109e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000ed6:	69bb      	ldr	r3, [r7, #24]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d007      	beq.n	8000eec <HAL_RCC_OscConfig+0x4c>
 8000edc:	69bb      	ldr	r3, [r7, #24]
 8000ede:	2b0c      	cmp	r3, #12
 8000ee0:	f040 808b 	bne.w	8000ffa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	f040 8087 	bne.w	8000ffa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000eec:	4b88      	ldr	r3, [pc, #544]	; (8001110 <HAL_RCC_OscConfig+0x270>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f003 0302 	and.w	r3, r3, #2
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d005      	beq.n	8000f04 <HAL_RCC_OscConfig+0x64>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	699b      	ldr	r3, [r3, #24]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d101      	bne.n	8000f04 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8000f00:	2301      	movs	r3, #1
 8000f02:	e3d9      	b.n	80016b8 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6a1a      	ldr	r2, [r3, #32]
 8000f08:	4b81      	ldr	r3, [pc, #516]	; (8001110 <HAL_RCC_OscConfig+0x270>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	f003 0308 	and.w	r3, r3, #8
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d004      	beq.n	8000f1e <HAL_RCC_OscConfig+0x7e>
 8000f14:	4b7e      	ldr	r3, [pc, #504]	; (8001110 <HAL_RCC_OscConfig+0x270>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f1c:	e005      	b.n	8000f2a <HAL_RCC_OscConfig+0x8a>
 8000f1e:	4b7c      	ldr	r3, [pc, #496]	; (8001110 <HAL_RCC_OscConfig+0x270>)
 8000f20:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000f24:	091b      	lsrs	r3, r3, #4
 8000f26:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d223      	bcs.n	8000f76 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	6a1b      	ldr	r3, [r3, #32]
 8000f32:	4618      	mov	r0, r3
 8000f34:	f000 fd54 	bl	80019e0 <RCC_SetFlashLatencyFromMSIRange>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e3ba      	b.n	80016b8 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f42:	4b73      	ldr	r3, [pc, #460]	; (8001110 <HAL_RCC_OscConfig+0x270>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a72      	ldr	r2, [pc, #456]	; (8001110 <HAL_RCC_OscConfig+0x270>)
 8000f48:	f043 0308 	orr.w	r3, r3, #8
 8000f4c:	6013      	str	r3, [r2, #0]
 8000f4e:	4b70      	ldr	r3, [pc, #448]	; (8001110 <HAL_RCC_OscConfig+0x270>)
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6a1b      	ldr	r3, [r3, #32]
 8000f5a:	496d      	ldr	r1, [pc, #436]	; (8001110 <HAL_RCC_OscConfig+0x270>)
 8000f5c:	4313      	orrs	r3, r2
 8000f5e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f60:	4b6b      	ldr	r3, [pc, #428]	; (8001110 <HAL_RCC_OscConfig+0x270>)
 8000f62:	685b      	ldr	r3, [r3, #4]
 8000f64:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	69db      	ldr	r3, [r3, #28]
 8000f6c:	021b      	lsls	r3, r3, #8
 8000f6e:	4968      	ldr	r1, [pc, #416]	; (8001110 <HAL_RCC_OscConfig+0x270>)
 8000f70:	4313      	orrs	r3, r2
 8000f72:	604b      	str	r3, [r1, #4]
 8000f74:	e025      	b.n	8000fc2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f76:	4b66      	ldr	r3, [pc, #408]	; (8001110 <HAL_RCC_OscConfig+0x270>)
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4a65      	ldr	r2, [pc, #404]	; (8001110 <HAL_RCC_OscConfig+0x270>)
 8000f7c:	f043 0308 	orr.w	r3, r3, #8
 8000f80:	6013      	str	r3, [r2, #0]
 8000f82:	4b63      	ldr	r3, [pc, #396]	; (8001110 <HAL_RCC_OscConfig+0x270>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	6a1b      	ldr	r3, [r3, #32]
 8000f8e:	4960      	ldr	r1, [pc, #384]	; (8001110 <HAL_RCC_OscConfig+0x270>)
 8000f90:	4313      	orrs	r3, r2
 8000f92:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000f94:	4b5e      	ldr	r3, [pc, #376]	; (8001110 <HAL_RCC_OscConfig+0x270>)
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	69db      	ldr	r3, [r3, #28]
 8000fa0:	021b      	lsls	r3, r3, #8
 8000fa2:	495b      	ldr	r1, [pc, #364]	; (8001110 <HAL_RCC_OscConfig+0x270>)
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8000fa8:	69bb      	ldr	r3, [r7, #24]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d109      	bne.n	8000fc2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6a1b      	ldr	r3, [r3, #32]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f000 fd14 	bl	80019e0 <RCC_SetFlashLatencyFromMSIRange>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	e37a      	b.n	80016b8 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000fc2:	f000 fc81 	bl	80018c8 <HAL_RCC_GetSysClockFreq>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	4b51      	ldr	r3, [pc, #324]	; (8001110 <HAL_RCC_OscConfig+0x270>)
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	091b      	lsrs	r3, r3, #4
 8000fce:	f003 030f 	and.w	r3, r3, #15
 8000fd2:	4950      	ldr	r1, [pc, #320]	; (8001114 <HAL_RCC_OscConfig+0x274>)
 8000fd4:	5ccb      	ldrb	r3, [r1, r3]
 8000fd6:	f003 031f 	and.w	r3, r3, #31
 8000fda:	fa22 f303 	lsr.w	r3, r2, r3
 8000fde:	4a4e      	ldr	r2, [pc, #312]	; (8001118 <HAL_RCC_OscConfig+0x278>)
 8000fe0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000fe2:	4b4e      	ldr	r3, [pc, #312]	; (800111c <HAL_RCC_OscConfig+0x27c>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff fb00 	bl	80005ec <HAL_InitTick>
 8000fec:	4603      	mov	r3, r0
 8000fee:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000ff0:	7bfb      	ldrb	r3, [r7, #15]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d052      	beq.n	800109c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8000ff6:	7bfb      	ldrb	r3, [r7, #15]
 8000ff8:	e35e      	b.n	80016b8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	699b      	ldr	r3, [r3, #24]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d032      	beq.n	8001068 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001002:	4b43      	ldr	r3, [pc, #268]	; (8001110 <HAL_RCC_OscConfig+0x270>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a42      	ldr	r2, [pc, #264]	; (8001110 <HAL_RCC_OscConfig+0x270>)
 8001008:	f043 0301 	orr.w	r3, r3, #1
 800100c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800100e:	f7ff fb3d 	bl	800068c <HAL_GetTick>
 8001012:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001014:	e008      	b.n	8001028 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001016:	f7ff fb39 	bl	800068c <HAL_GetTick>
 800101a:	4602      	mov	r2, r0
 800101c:	693b      	ldr	r3, [r7, #16]
 800101e:	1ad3      	subs	r3, r2, r3
 8001020:	2b02      	cmp	r3, #2
 8001022:	d901      	bls.n	8001028 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001024:	2303      	movs	r3, #3
 8001026:	e347      	b.n	80016b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001028:	4b39      	ldr	r3, [pc, #228]	; (8001110 <HAL_RCC_OscConfig+0x270>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	f003 0302 	and.w	r3, r3, #2
 8001030:	2b00      	cmp	r3, #0
 8001032:	d0f0      	beq.n	8001016 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001034:	4b36      	ldr	r3, [pc, #216]	; (8001110 <HAL_RCC_OscConfig+0x270>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	4a35      	ldr	r2, [pc, #212]	; (8001110 <HAL_RCC_OscConfig+0x270>)
 800103a:	f043 0308 	orr.w	r3, r3, #8
 800103e:	6013      	str	r3, [r2, #0]
 8001040:	4b33      	ldr	r3, [pc, #204]	; (8001110 <HAL_RCC_OscConfig+0x270>)
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6a1b      	ldr	r3, [r3, #32]
 800104c:	4930      	ldr	r1, [pc, #192]	; (8001110 <HAL_RCC_OscConfig+0x270>)
 800104e:	4313      	orrs	r3, r2
 8001050:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001052:	4b2f      	ldr	r3, [pc, #188]	; (8001110 <HAL_RCC_OscConfig+0x270>)
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	69db      	ldr	r3, [r3, #28]
 800105e:	021b      	lsls	r3, r3, #8
 8001060:	492b      	ldr	r1, [pc, #172]	; (8001110 <HAL_RCC_OscConfig+0x270>)
 8001062:	4313      	orrs	r3, r2
 8001064:	604b      	str	r3, [r1, #4]
 8001066:	e01a      	b.n	800109e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001068:	4b29      	ldr	r3, [pc, #164]	; (8001110 <HAL_RCC_OscConfig+0x270>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a28      	ldr	r2, [pc, #160]	; (8001110 <HAL_RCC_OscConfig+0x270>)
 800106e:	f023 0301 	bic.w	r3, r3, #1
 8001072:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001074:	f7ff fb0a 	bl	800068c <HAL_GetTick>
 8001078:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800107a:	e008      	b.n	800108e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800107c:	f7ff fb06 	bl	800068c <HAL_GetTick>
 8001080:	4602      	mov	r2, r0
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	2b02      	cmp	r3, #2
 8001088:	d901      	bls.n	800108e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800108a:	2303      	movs	r3, #3
 800108c:	e314      	b.n	80016b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800108e:	4b20      	ldr	r3, [pc, #128]	; (8001110 <HAL_RCC_OscConfig+0x270>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 0302 	and.w	r3, r3, #2
 8001096:	2b00      	cmp	r3, #0
 8001098:	d1f0      	bne.n	800107c <HAL_RCC_OscConfig+0x1dc>
 800109a:	e000      	b.n	800109e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800109c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f003 0301 	and.w	r3, r3, #1
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d073      	beq.n	8001192 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80010aa:	69bb      	ldr	r3, [r7, #24]
 80010ac:	2b08      	cmp	r3, #8
 80010ae:	d005      	beq.n	80010bc <HAL_RCC_OscConfig+0x21c>
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	2b0c      	cmp	r3, #12
 80010b4:	d10e      	bne.n	80010d4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	2b03      	cmp	r3, #3
 80010ba:	d10b      	bne.n	80010d4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010bc:	4b14      	ldr	r3, [pc, #80]	; (8001110 <HAL_RCC_OscConfig+0x270>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d063      	beq.n	8001190 <HAL_RCC_OscConfig+0x2f0>
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d15f      	bne.n	8001190 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	e2f1      	b.n	80016b8 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010dc:	d106      	bne.n	80010ec <HAL_RCC_OscConfig+0x24c>
 80010de:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <HAL_RCC_OscConfig+0x270>)
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	4a0b      	ldr	r2, [pc, #44]	; (8001110 <HAL_RCC_OscConfig+0x270>)
 80010e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010e8:	6013      	str	r3, [r2, #0]
 80010ea:	e025      	b.n	8001138 <HAL_RCC_OscConfig+0x298>
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010f4:	d114      	bne.n	8001120 <HAL_RCC_OscConfig+0x280>
 80010f6:	4b06      	ldr	r3, [pc, #24]	; (8001110 <HAL_RCC_OscConfig+0x270>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a05      	ldr	r2, [pc, #20]	; (8001110 <HAL_RCC_OscConfig+0x270>)
 80010fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001100:	6013      	str	r3, [r2, #0]
 8001102:	4b03      	ldr	r3, [pc, #12]	; (8001110 <HAL_RCC_OscConfig+0x270>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	4a02      	ldr	r2, [pc, #8]	; (8001110 <HAL_RCC_OscConfig+0x270>)
 8001108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800110c:	6013      	str	r3, [r2, #0]
 800110e:	e013      	b.n	8001138 <HAL_RCC_OscConfig+0x298>
 8001110:	40021000 	.word	0x40021000
 8001114:	080020e0 	.word	0x080020e0
 8001118:	20000000 	.word	0x20000000
 800111c:	20000004 	.word	0x20000004
 8001120:	4ba0      	ldr	r3, [pc, #640]	; (80013a4 <HAL_RCC_OscConfig+0x504>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a9f      	ldr	r2, [pc, #636]	; (80013a4 <HAL_RCC_OscConfig+0x504>)
 8001126:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800112a:	6013      	str	r3, [r2, #0]
 800112c:	4b9d      	ldr	r3, [pc, #628]	; (80013a4 <HAL_RCC_OscConfig+0x504>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a9c      	ldr	r2, [pc, #624]	; (80013a4 <HAL_RCC_OscConfig+0x504>)
 8001132:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001136:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d013      	beq.n	8001168 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001140:	f7ff faa4 	bl	800068c <HAL_GetTick>
 8001144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001146:	e008      	b.n	800115a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001148:	f7ff faa0 	bl	800068c <HAL_GetTick>
 800114c:	4602      	mov	r2, r0
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	1ad3      	subs	r3, r2, r3
 8001152:	2b64      	cmp	r3, #100	; 0x64
 8001154:	d901      	bls.n	800115a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001156:	2303      	movs	r3, #3
 8001158:	e2ae      	b.n	80016b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800115a:	4b92      	ldr	r3, [pc, #584]	; (80013a4 <HAL_RCC_OscConfig+0x504>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001162:	2b00      	cmp	r3, #0
 8001164:	d0f0      	beq.n	8001148 <HAL_RCC_OscConfig+0x2a8>
 8001166:	e014      	b.n	8001192 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001168:	f7ff fa90 	bl	800068c <HAL_GetTick>
 800116c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800116e:	e008      	b.n	8001182 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001170:	f7ff fa8c 	bl	800068c <HAL_GetTick>
 8001174:	4602      	mov	r2, r0
 8001176:	693b      	ldr	r3, [r7, #16]
 8001178:	1ad3      	subs	r3, r2, r3
 800117a:	2b64      	cmp	r3, #100	; 0x64
 800117c:	d901      	bls.n	8001182 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800117e:	2303      	movs	r3, #3
 8001180:	e29a      	b.n	80016b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001182:	4b88      	ldr	r3, [pc, #544]	; (80013a4 <HAL_RCC_OscConfig+0x504>)
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118a:	2b00      	cmp	r3, #0
 800118c:	d1f0      	bne.n	8001170 <HAL_RCC_OscConfig+0x2d0>
 800118e:	e000      	b.n	8001192 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001190:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f003 0302 	and.w	r3, r3, #2
 800119a:	2b00      	cmp	r3, #0
 800119c:	d060      	beq.n	8001260 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800119e:	69bb      	ldr	r3, [r7, #24]
 80011a0:	2b04      	cmp	r3, #4
 80011a2:	d005      	beq.n	80011b0 <HAL_RCC_OscConfig+0x310>
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	2b0c      	cmp	r3, #12
 80011a8:	d119      	bne.n	80011de <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80011aa:	697b      	ldr	r3, [r7, #20]
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	d116      	bne.n	80011de <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011b0:	4b7c      	ldr	r3, [pc, #496]	; (80013a4 <HAL_RCC_OscConfig+0x504>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d005      	beq.n	80011c8 <HAL_RCC_OscConfig+0x328>
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d101      	bne.n	80011c8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80011c4:	2301      	movs	r3, #1
 80011c6:	e277      	b.n	80016b8 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011c8:	4b76      	ldr	r3, [pc, #472]	; (80013a4 <HAL_RCC_OscConfig+0x504>)
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	691b      	ldr	r3, [r3, #16]
 80011d4:	061b      	lsls	r3, r3, #24
 80011d6:	4973      	ldr	r1, [pc, #460]	; (80013a4 <HAL_RCC_OscConfig+0x504>)
 80011d8:	4313      	orrs	r3, r2
 80011da:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80011dc:	e040      	b.n	8001260 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	68db      	ldr	r3, [r3, #12]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d023      	beq.n	800122e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011e6:	4b6f      	ldr	r3, [pc, #444]	; (80013a4 <HAL_RCC_OscConfig+0x504>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a6e      	ldr	r2, [pc, #440]	; (80013a4 <HAL_RCC_OscConfig+0x504>)
 80011ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011f2:	f7ff fa4b 	bl	800068c <HAL_GetTick>
 80011f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80011f8:	e008      	b.n	800120c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011fa:	f7ff fa47 	bl	800068c <HAL_GetTick>
 80011fe:	4602      	mov	r2, r0
 8001200:	693b      	ldr	r3, [r7, #16]
 8001202:	1ad3      	subs	r3, r2, r3
 8001204:	2b02      	cmp	r3, #2
 8001206:	d901      	bls.n	800120c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001208:	2303      	movs	r3, #3
 800120a:	e255      	b.n	80016b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800120c:	4b65      	ldr	r3, [pc, #404]	; (80013a4 <HAL_RCC_OscConfig+0x504>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001214:	2b00      	cmp	r3, #0
 8001216:	d0f0      	beq.n	80011fa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001218:	4b62      	ldr	r3, [pc, #392]	; (80013a4 <HAL_RCC_OscConfig+0x504>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	691b      	ldr	r3, [r3, #16]
 8001224:	061b      	lsls	r3, r3, #24
 8001226:	495f      	ldr	r1, [pc, #380]	; (80013a4 <HAL_RCC_OscConfig+0x504>)
 8001228:	4313      	orrs	r3, r2
 800122a:	604b      	str	r3, [r1, #4]
 800122c:	e018      	b.n	8001260 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800122e:	4b5d      	ldr	r3, [pc, #372]	; (80013a4 <HAL_RCC_OscConfig+0x504>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a5c      	ldr	r2, [pc, #368]	; (80013a4 <HAL_RCC_OscConfig+0x504>)
 8001234:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001238:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800123a:	f7ff fa27 	bl	800068c <HAL_GetTick>
 800123e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001240:	e008      	b.n	8001254 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001242:	f7ff fa23 	bl	800068c <HAL_GetTick>
 8001246:	4602      	mov	r2, r0
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	2b02      	cmp	r3, #2
 800124e:	d901      	bls.n	8001254 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001250:	2303      	movs	r3, #3
 8001252:	e231      	b.n	80016b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001254:	4b53      	ldr	r3, [pc, #332]	; (80013a4 <HAL_RCC_OscConfig+0x504>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800125c:	2b00      	cmp	r3, #0
 800125e:	d1f0      	bne.n	8001242 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f003 0308 	and.w	r3, r3, #8
 8001268:	2b00      	cmp	r3, #0
 800126a:	d03c      	beq.n	80012e6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	695b      	ldr	r3, [r3, #20]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d01c      	beq.n	80012ae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001274:	4b4b      	ldr	r3, [pc, #300]	; (80013a4 <HAL_RCC_OscConfig+0x504>)
 8001276:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800127a:	4a4a      	ldr	r2, [pc, #296]	; (80013a4 <HAL_RCC_OscConfig+0x504>)
 800127c:	f043 0301 	orr.w	r3, r3, #1
 8001280:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001284:	f7ff fa02 	bl	800068c <HAL_GetTick>
 8001288:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800128a:	e008      	b.n	800129e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800128c:	f7ff f9fe 	bl	800068c <HAL_GetTick>
 8001290:	4602      	mov	r2, r0
 8001292:	693b      	ldr	r3, [r7, #16]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	2b02      	cmp	r3, #2
 8001298:	d901      	bls.n	800129e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800129a:	2303      	movs	r3, #3
 800129c:	e20c      	b.n	80016b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800129e:	4b41      	ldr	r3, [pc, #260]	; (80013a4 <HAL_RCC_OscConfig+0x504>)
 80012a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012a4:	f003 0302 	and.w	r3, r3, #2
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d0ef      	beq.n	800128c <HAL_RCC_OscConfig+0x3ec>
 80012ac:	e01b      	b.n	80012e6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80012ae:	4b3d      	ldr	r3, [pc, #244]	; (80013a4 <HAL_RCC_OscConfig+0x504>)
 80012b0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012b4:	4a3b      	ldr	r2, [pc, #236]	; (80013a4 <HAL_RCC_OscConfig+0x504>)
 80012b6:	f023 0301 	bic.w	r3, r3, #1
 80012ba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012be:	f7ff f9e5 	bl	800068c <HAL_GetTick>
 80012c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80012c4:	e008      	b.n	80012d8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80012c6:	f7ff f9e1 	bl	800068c <HAL_GetTick>
 80012ca:	4602      	mov	r2, r0
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	1ad3      	subs	r3, r2, r3
 80012d0:	2b02      	cmp	r3, #2
 80012d2:	d901      	bls.n	80012d8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80012d4:	2303      	movs	r3, #3
 80012d6:	e1ef      	b.n	80016b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80012d8:	4b32      	ldr	r3, [pc, #200]	; (80013a4 <HAL_RCC_OscConfig+0x504>)
 80012da:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d1ef      	bne.n	80012c6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0304 	and.w	r3, r3, #4
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	f000 80a6 	beq.w	8001440 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012f4:	2300      	movs	r3, #0
 80012f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80012f8:	4b2a      	ldr	r3, [pc, #168]	; (80013a4 <HAL_RCC_OscConfig+0x504>)
 80012fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001300:	2b00      	cmp	r3, #0
 8001302:	d10d      	bne.n	8001320 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001304:	4b27      	ldr	r3, [pc, #156]	; (80013a4 <HAL_RCC_OscConfig+0x504>)
 8001306:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001308:	4a26      	ldr	r2, [pc, #152]	; (80013a4 <HAL_RCC_OscConfig+0x504>)
 800130a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800130e:	6593      	str	r3, [r2, #88]	; 0x58
 8001310:	4b24      	ldr	r3, [pc, #144]	; (80013a4 <HAL_RCC_OscConfig+0x504>)
 8001312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001314:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001318:	60bb      	str	r3, [r7, #8]
 800131a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800131c:	2301      	movs	r3, #1
 800131e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001320:	4b21      	ldr	r3, [pc, #132]	; (80013a8 <HAL_RCC_OscConfig+0x508>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001328:	2b00      	cmp	r3, #0
 800132a:	d118      	bne.n	800135e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800132c:	4b1e      	ldr	r3, [pc, #120]	; (80013a8 <HAL_RCC_OscConfig+0x508>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	4a1d      	ldr	r2, [pc, #116]	; (80013a8 <HAL_RCC_OscConfig+0x508>)
 8001332:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001336:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001338:	f7ff f9a8 	bl	800068c <HAL_GetTick>
 800133c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800133e:	e008      	b.n	8001352 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001340:	f7ff f9a4 	bl	800068c <HAL_GetTick>
 8001344:	4602      	mov	r2, r0
 8001346:	693b      	ldr	r3, [r7, #16]
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	2b02      	cmp	r3, #2
 800134c:	d901      	bls.n	8001352 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800134e:	2303      	movs	r3, #3
 8001350:	e1b2      	b.n	80016b8 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001352:	4b15      	ldr	r3, [pc, #84]	; (80013a8 <HAL_RCC_OscConfig+0x508>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800135a:	2b00      	cmp	r3, #0
 800135c:	d0f0      	beq.n	8001340 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	2b01      	cmp	r3, #1
 8001364:	d108      	bne.n	8001378 <HAL_RCC_OscConfig+0x4d8>
 8001366:	4b0f      	ldr	r3, [pc, #60]	; (80013a4 <HAL_RCC_OscConfig+0x504>)
 8001368:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800136c:	4a0d      	ldr	r2, [pc, #52]	; (80013a4 <HAL_RCC_OscConfig+0x504>)
 800136e:	f043 0301 	orr.w	r3, r3, #1
 8001372:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001376:	e029      	b.n	80013cc <HAL_RCC_OscConfig+0x52c>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	2b05      	cmp	r3, #5
 800137e:	d115      	bne.n	80013ac <HAL_RCC_OscConfig+0x50c>
 8001380:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <HAL_RCC_OscConfig+0x504>)
 8001382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001386:	4a07      	ldr	r2, [pc, #28]	; (80013a4 <HAL_RCC_OscConfig+0x504>)
 8001388:	f043 0304 	orr.w	r3, r3, #4
 800138c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001390:	4b04      	ldr	r3, [pc, #16]	; (80013a4 <HAL_RCC_OscConfig+0x504>)
 8001392:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001396:	4a03      	ldr	r2, [pc, #12]	; (80013a4 <HAL_RCC_OscConfig+0x504>)
 8001398:	f043 0301 	orr.w	r3, r3, #1
 800139c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80013a0:	e014      	b.n	80013cc <HAL_RCC_OscConfig+0x52c>
 80013a2:	bf00      	nop
 80013a4:	40021000 	.word	0x40021000
 80013a8:	40007000 	.word	0x40007000
 80013ac:	4b9a      	ldr	r3, [pc, #616]	; (8001618 <HAL_RCC_OscConfig+0x778>)
 80013ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013b2:	4a99      	ldr	r2, [pc, #612]	; (8001618 <HAL_RCC_OscConfig+0x778>)
 80013b4:	f023 0301 	bic.w	r3, r3, #1
 80013b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80013bc:	4b96      	ldr	r3, [pc, #600]	; (8001618 <HAL_RCC_OscConfig+0x778>)
 80013be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013c2:	4a95      	ldr	r2, [pc, #596]	; (8001618 <HAL_RCC_OscConfig+0x778>)
 80013c4:	f023 0304 	bic.w	r3, r3, #4
 80013c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d016      	beq.n	8001402 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013d4:	f7ff f95a 	bl	800068c <HAL_GetTick>
 80013d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80013da:	e00a      	b.n	80013f2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013dc:	f7ff f956 	bl	800068c <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e162      	b.n	80016b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80013f2:	4b89      	ldr	r3, [pc, #548]	; (8001618 <HAL_RCC_OscConfig+0x778>)
 80013f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013f8:	f003 0302 	and.w	r3, r3, #2
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d0ed      	beq.n	80013dc <HAL_RCC_OscConfig+0x53c>
 8001400:	e015      	b.n	800142e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001402:	f7ff f943 	bl	800068c <HAL_GetTick>
 8001406:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001408:	e00a      	b.n	8001420 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800140a:	f7ff f93f 	bl	800068c <HAL_GetTick>
 800140e:	4602      	mov	r2, r0
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	f241 3288 	movw	r2, #5000	; 0x1388
 8001418:	4293      	cmp	r3, r2
 800141a:	d901      	bls.n	8001420 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800141c:	2303      	movs	r3, #3
 800141e:	e14b      	b.n	80016b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001420:	4b7d      	ldr	r3, [pc, #500]	; (8001618 <HAL_RCC_OscConfig+0x778>)
 8001422:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d1ed      	bne.n	800140a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800142e:	7ffb      	ldrb	r3, [r7, #31]
 8001430:	2b01      	cmp	r3, #1
 8001432:	d105      	bne.n	8001440 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001434:	4b78      	ldr	r3, [pc, #480]	; (8001618 <HAL_RCC_OscConfig+0x778>)
 8001436:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001438:	4a77      	ldr	r2, [pc, #476]	; (8001618 <HAL_RCC_OscConfig+0x778>)
 800143a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800143e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 0320 	and.w	r3, r3, #32
 8001448:	2b00      	cmp	r3, #0
 800144a:	d03c      	beq.n	80014c6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001450:	2b00      	cmp	r3, #0
 8001452:	d01c      	beq.n	800148e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001454:	4b70      	ldr	r3, [pc, #448]	; (8001618 <HAL_RCC_OscConfig+0x778>)
 8001456:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800145a:	4a6f      	ldr	r2, [pc, #444]	; (8001618 <HAL_RCC_OscConfig+0x778>)
 800145c:	f043 0301 	orr.w	r3, r3, #1
 8001460:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001464:	f7ff f912 	bl	800068c <HAL_GetTick>
 8001468:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800146a:	e008      	b.n	800147e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800146c:	f7ff f90e 	bl	800068c <HAL_GetTick>
 8001470:	4602      	mov	r2, r0
 8001472:	693b      	ldr	r3, [r7, #16]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	2b02      	cmp	r3, #2
 8001478:	d901      	bls.n	800147e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800147a:	2303      	movs	r3, #3
 800147c:	e11c      	b.n	80016b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800147e:	4b66      	ldr	r3, [pc, #408]	; (8001618 <HAL_RCC_OscConfig+0x778>)
 8001480:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001484:	f003 0302 	and.w	r3, r3, #2
 8001488:	2b00      	cmp	r3, #0
 800148a:	d0ef      	beq.n	800146c <HAL_RCC_OscConfig+0x5cc>
 800148c:	e01b      	b.n	80014c6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800148e:	4b62      	ldr	r3, [pc, #392]	; (8001618 <HAL_RCC_OscConfig+0x778>)
 8001490:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001494:	4a60      	ldr	r2, [pc, #384]	; (8001618 <HAL_RCC_OscConfig+0x778>)
 8001496:	f023 0301 	bic.w	r3, r3, #1
 800149a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800149e:	f7ff f8f5 	bl	800068c <HAL_GetTick>
 80014a2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80014a4:	e008      	b.n	80014b8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80014a6:	f7ff f8f1 	bl	800068c <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d901      	bls.n	80014b8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e0ff      	b.n	80016b8 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80014b8:	4b57      	ldr	r3, [pc, #348]	; (8001618 <HAL_RCC_OscConfig+0x778>)
 80014ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80014be:	f003 0302 	and.w	r3, r3, #2
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d1ef      	bne.n	80014a6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	f000 80f3 	beq.w	80016b6 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	f040 80c9 	bne.w	800166c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80014da:	4b4f      	ldr	r3, [pc, #316]	; (8001618 <HAL_RCC_OscConfig+0x778>)
 80014dc:	68db      	ldr	r3, [r3, #12]
 80014de:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014e0:	697b      	ldr	r3, [r7, #20]
 80014e2:	f003 0203 	and.w	r2, r3, #3
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014ea:	429a      	cmp	r2, r3
 80014ec:	d12c      	bne.n	8001548 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80014ee:	697b      	ldr	r3, [r7, #20]
 80014f0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f8:	3b01      	subs	r3, #1
 80014fa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d123      	bne.n	8001548 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800150a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800150c:	429a      	cmp	r2, r3
 800150e:	d11b      	bne.n	8001548 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800151a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800151c:	429a      	cmp	r2, r3
 800151e:	d113      	bne.n	8001548 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800152a:	085b      	lsrs	r3, r3, #1
 800152c:	3b01      	subs	r3, #1
 800152e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001530:	429a      	cmp	r2, r3
 8001532:	d109      	bne.n	8001548 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	085b      	lsrs	r3, r3, #1
 8001540:	3b01      	subs	r3, #1
 8001542:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001544:	429a      	cmp	r2, r3
 8001546:	d06b      	beq.n	8001620 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001548:	69bb      	ldr	r3, [r7, #24]
 800154a:	2b0c      	cmp	r3, #12
 800154c:	d062      	beq.n	8001614 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800154e:	4b32      	ldr	r3, [pc, #200]	; (8001618 <HAL_RCC_OscConfig+0x778>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800155a:	2301      	movs	r3, #1
 800155c:	e0ac      	b.n	80016b8 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800155e:	4b2e      	ldr	r3, [pc, #184]	; (8001618 <HAL_RCC_OscConfig+0x778>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a2d      	ldr	r2, [pc, #180]	; (8001618 <HAL_RCC_OscConfig+0x778>)
 8001564:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001568:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800156a:	f7ff f88f 	bl	800068c <HAL_GetTick>
 800156e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001570:	e008      	b.n	8001584 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001572:	f7ff f88b 	bl	800068c <HAL_GetTick>
 8001576:	4602      	mov	r2, r0
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	2b02      	cmp	r3, #2
 800157e:	d901      	bls.n	8001584 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001580:	2303      	movs	r3, #3
 8001582:	e099      	b.n	80016b8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001584:	4b24      	ldr	r3, [pc, #144]	; (8001618 <HAL_RCC_OscConfig+0x778>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d1f0      	bne.n	8001572 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001590:	4b21      	ldr	r3, [pc, #132]	; (8001618 <HAL_RCC_OscConfig+0x778>)
 8001592:	68da      	ldr	r2, [r3, #12]
 8001594:	4b21      	ldr	r3, [pc, #132]	; (800161c <HAL_RCC_OscConfig+0x77c>)
 8001596:	4013      	ands	r3, r2
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800159c:	687a      	ldr	r2, [r7, #4]
 800159e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80015a0:	3a01      	subs	r2, #1
 80015a2:	0112      	lsls	r2, r2, #4
 80015a4:	4311      	orrs	r1, r2
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80015aa:	0212      	lsls	r2, r2, #8
 80015ac:	4311      	orrs	r1, r2
 80015ae:	687a      	ldr	r2, [r7, #4]
 80015b0:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80015b2:	0852      	lsrs	r2, r2, #1
 80015b4:	3a01      	subs	r2, #1
 80015b6:	0552      	lsls	r2, r2, #21
 80015b8:	4311      	orrs	r1, r2
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80015be:	0852      	lsrs	r2, r2, #1
 80015c0:	3a01      	subs	r2, #1
 80015c2:	0652      	lsls	r2, r2, #25
 80015c4:	4311      	orrs	r1, r2
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80015ca:	06d2      	lsls	r2, r2, #27
 80015cc:	430a      	orrs	r2, r1
 80015ce:	4912      	ldr	r1, [pc, #72]	; (8001618 <HAL_RCC_OscConfig+0x778>)
 80015d0:	4313      	orrs	r3, r2
 80015d2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80015d4:	4b10      	ldr	r3, [pc, #64]	; (8001618 <HAL_RCC_OscConfig+0x778>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a0f      	ldr	r2, [pc, #60]	; (8001618 <HAL_RCC_OscConfig+0x778>)
 80015da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015de:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80015e0:	4b0d      	ldr	r3, [pc, #52]	; (8001618 <HAL_RCC_OscConfig+0x778>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	4a0c      	ldr	r2, [pc, #48]	; (8001618 <HAL_RCC_OscConfig+0x778>)
 80015e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80015ea:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80015ec:	f7ff f84e 	bl	800068c <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015f4:	f7ff f84a 	bl	800068c <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e058      	b.n	80016b8 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001606:	4b04      	ldr	r3, [pc, #16]	; (8001618 <HAL_RCC_OscConfig+0x778>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d0f0      	beq.n	80015f4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001612:	e050      	b.n	80016b6 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e04f      	b.n	80016b8 <HAL_RCC_OscConfig+0x818>
 8001618:	40021000 	.word	0x40021000
 800161c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001620:	4b27      	ldr	r3, [pc, #156]	; (80016c0 <HAL_RCC_OscConfig+0x820>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d144      	bne.n	80016b6 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 800162c:	4b24      	ldr	r3, [pc, #144]	; (80016c0 <HAL_RCC_OscConfig+0x820>)
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a23      	ldr	r2, [pc, #140]	; (80016c0 <HAL_RCC_OscConfig+0x820>)
 8001632:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001636:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001638:	4b21      	ldr	r3, [pc, #132]	; (80016c0 <HAL_RCC_OscConfig+0x820>)
 800163a:	68db      	ldr	r3, [r3, #12]
 800163c:	4a20      	ldr	r2, [pc, #128]	; (80016c0 <HAL_RCC_OscConfig+0x820>)
 800163e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001642:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001644:	f7ff f822 	bl	800068c <HAL_GetTick>
 8001648:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800164a:	e008      	b.n	800165e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800164c:	f7ff f81e 	bl	800068c <HAL_GetTick>
 8001650:	4602      	mov	r2, r0
 8001652:	693b      	ldr	r3, [r7, #16]
 8001654:	1ad3      	subs	r3, r2, r3
 8001656:	2b02      	cmp	r3, #2
 8001658:	d901      	bls.n	800165e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800165a:	2303      	movs	r3, #3
 800165c:	e02c      	b.n	80016b8 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800165e:	4b18      	ldr	r3, [pc, #96]	; (80016c0 <HAL_RCC_OscConfig+0x820>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d0f0      	beq.n	800164c <HAL_RCC_OscConfig+0x7ac>
 800166a:	e024      	b.n	80016b6 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	2b0c      	cmp	r3, #12
 8001670:	d01f      	beq.n	80016b2 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001672:	4b13      	ldr	r3, [pc, #76]	; (80016c0 <HAL_RCC_OscConfig+0x820>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4a12      	ldr	r2, [pc, #72]	; (80016c0 <HAL_RCC_OscConfig+0x820>)
 8001678:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800167c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800167e:	f7ff f805 	bl	800068c <HAL_GetTick>
 8001682:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001684:	e008      	b.n	8001698 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001686:	f7ff f801 	bl	800068c <HAL_GetTick>
 800168a:	4602      	mov	r2, r0
 800168c:	693b      	ldr	r3, [r7, #16]
 800168e:	1ad3      	subs	r3, r2, r3
 8001690:	2b02      	cmp	r3, #2
 8001692:	d901      	bls.n	8001698 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001694:	2303      	movs	r3, #3
 8001696:	e00f      	b.n	80016b8 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001698:	4b09      	ldr	r3, [pc, #36]	; (80016c0 <HAL_RCC_OscConfig+0x820>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d1f0      	bne.n	8001686 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80016a4:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <HAL_RCC_OscConfig+0x820>)
 80016a6:	68da      	ldr	r2, [r3, #12]
 80016a8:	4905      	ldr	r1, [pc, #20]	; (80016c0 <HAL_RCC_OscConfig+0x820>)
 80016aa:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <HAL_RCC_OscConfig+0x824>)
 80016ac:	4013      	ands	r3, r2
 80016ae:	60cb      	str	r3, [r1, #12]
 80016b0:	e001      	b.n	80016b6 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e000      	b.n	80016b8 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80016b6:	2300      	movs	r3, #0
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3720      	adds	r7, #32
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	40021000 	.word	0x40021000
 80016c4:	feeefffc 	.word	0xfeeefffc

080016c8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b084      	sub	sp, #16
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
 80016d0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d101      	bne.n	80016dc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016d8:	2301      	movs	r3, #1
 80016da:	e0e7      	b.n	80018ac <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016dc:	4b75      	ldr	r3, [pc, #468]	; (80018b4 <HAL_RCC_ClockConfig+0x1ec>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 0307 	and.w	r3, r3, #7
 80016e4:	683a      	ldr	r2, [r7, #0]
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d910      	bls.n	800170c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ea:	4b72      	ldr	r3, [pc, #456]	; (80018b4 <HAL_RCC_ClockConfig+0x1ec>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f023 0207 	bic.w	r2, r3, #7
 80016f2:	4970      	ldr	r1, [pc, #448]	; (80018b4 <HAL_RCC_ClockConfig+0x1ec>)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	4313      	orrs	r3, r2
 80016f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016fa:	4b6e      	ldr	r3, [pc, #440]	; (80018b4 <HAL_RCC_ClockConfig+0x1ec>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0307 	and.w	r3, r3, #7
 8001702:	683a      	ldr	r2, [r7, #0]
 8001704:	429a      	cmp	r2, r3
 8001706:	d001      	beq.n	800170c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001708:	2301      	movs	r3, #1
 800170a:	e0cf      	b.n	80018ac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0302 	and.w	r3, r3, #2
 8001714:	2b00      	cmp	r3, #0
 8001716:	d010      	beq.n	800173a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689a      	ldr	r2, [r3, #8]
 800171c:	4b66      	ldr	r3, [pc, #408]	; (80018b8 <HAL_RCC_ClockConfig+0x1f0>)
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001724:	429a      	cmp	r2, r3
 8001726:	d908      	bls.n	800173a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001728:	4b63      	ldr	r3, [pc, #396]	; (80018b8 <HAL_RCC_ClockConfig+0x1f0>)
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	4960      	ldr	r1, [pc, #384]	; (80018b8 <HAL_RCC_ClockConfig+0x1f0>)
 8001736:	4313      	orrs	r3, r2
 8001738:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0301 	and.w	r3, r3, #1
 8001742:	2b00      	cmp	r3, #0
 8001744:	d04c      	beq.n	80017e0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	2b03      	cmp	r3, #3
 800174c:	d107      	bne.n	800175e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800174e:	4b5a      	ldr	r3, [pc, #360]	; (80018b8 <HAL_RCC_ClockConfig+0x1f0>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001756:	2b00      	cmp	r3, #0
 8001758:	d121      	bne.n	800179e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e0a6      	b.n	80018ac <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	2b02      	cmp	r3, #2
 8001764:	d107      	bne.n	8001776 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001766:	4b54      	ldr	r3, [pc, #336]	; (80018b8 <HAL_RCC_ClockConfig+0x1f0>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d115      	bne.n	800179e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e09a      	b.n	80018ac <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	2b00      	cmp	r3, #0
 800177c:	d107      	bne.n	800178e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800177e:	4b4e      	ldr	r3, [pc, #312]	; (80018b8 <HAL_RCC_ClockConfig+0x1f0>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	2b00      	cmp	r3, #0
 8001788:	d109      	bne.n	800179e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e08e      	b.n	80018ac <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800178e:	4b4a      	ldr	r3, [pc, #296]	; (80018b8 <HAL_RCC_ClockConfig+0x1f0>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001796:	2b00      	cmp	r3, #0
 8001798:	d101      	bne.n	800179e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e086      	b.n	80018ac <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800179e:	4b46      	ldr	r3, [pc, #280]	; (80018b8 <HAL_RCC_ClockConfig+0x1f0>)
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	f023 0203 	bic.w	r2, r3, #3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	4943      	ldr	r1, [pc, #268]	; (80018b8 <HAL_RCC_ClockConfig+0x1f0>)
 80017ac:	4313      	orrs	r3, r2
 80017ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80017b0:	f7fe ff6c 	bl	800068c <HAL_GetTick>
 80017b4:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017b6:	e00a      	b.n	80017ce <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017b8:	f7fe ff68 	bl	800068c <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e06e      	b.n	80018ac <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ce:	4b3a      	ldr	r3, [pc, #232]	; (80018b8 <HAL_RCC_ClockConfig+0x1f0>)
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f003 020c 	and.w	r2, r3, #12
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	429a      	cmp	r2, r3
 80017de:	d1eb      	bne.n	80017b8 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0302 	and.w	r3, r3, #2
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d010      	beq.n	800180e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	689a      	ldr	r2, [r3, #8]
 80017f0:	4b31      	ldr	r3, [pc, #196]	; (80018b8 <HAL_RCC_ClockConfig+0x1f0>)
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017f8:	429a      	cmp	r2, r3
 80017fa:	d208      	bcs.n	800180e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017fc:	4b2e      	ldr	r3, [pc, #184]	; (80018b8 <HAL_RCC_ClockConfig+0x1f0>)
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	492b      	ldr	r1, [pc, #172]	; (80018b8 <HAL_RCC_ClockConfig+0x1f0>)
 800180a:	4313      	orrs	r3, r2
 800180c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800180e:	4b29      	ldr	r3, [pc, #164]	; (80018b4 <HAL_RCC_ClockConfig+0x1ec>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	683a      	ldr	r2, [r7, #0]
 8001818:	429a      	cmp	r2, r3
 800181a:	d210      	bcs.n	800183e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800181c:	4b25      	ldr	r3, [pc, #148]	; (80018b4 <HAL_RCC_ClockConfig+0x1ec>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f023 0207 	bic.w	r2, r3, #7
 8001824:	4923      	ldr	r1, [pc, #140]	; (80018b4 <HAL_RCC_ClockConfig+0x1ec>)
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	4313      	orrs	r3, r2
 800182a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800182c:	4b21      	ldr	r3, [pc, #132]	; (80018b4 <HAL_RCC_ClockConfig+0x1ec>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0307 	and.w	r3, r3, #7
 8001834:	683a      	ldr	r2, [r7, #0]
 8001836:	429a      	cmp	r2, r3
 8001838:	d001      	beq.n	800183e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800183a:	2301      	movs	r3, #1
 800183c:	e036      	b.n	80018ac <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0304 	and.w	r3, r3, #4
 8001846:	2b00      	cmp	r3, #0
 8001848:	d008      	beq.n	800185c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800184a:	4b1b      	ldr	r3, [pc, #108]	; (80018b8 <HAL_RCC_ClockConfig+0x1f0>)
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	68db      	ldr	r3, [r3, #12]
 8001856:	4918      	ldr	r1, [pc, #96]	; (80018b8 <HAL_RCC_ClockConfig+0x1f0>)
 8001858:	4313      	orrs	r3, r2
 800185a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0308 	and.w	r3, r3, #8
 8001864:	2b00      	cmp	r3, #0
 8001866:	d009      	beq.n	800187c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001868:	4b13      	ldr	r3, [pc, #76]	; (80018b8 <HAL_RCC_ClockConfig+0x1f0>)
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	691b      	ldr	r3, [r3, #16]
 8001874:	00db      	lsls	r3, r3, #3
 8001876:	4910      	ldr	r1, [pc, #64]	; (80018b8 <HAL_RCC_ClockConfig+0x1f0>)
 8001878:	4313      	orrs	r3, r2
 800187a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800187c:	f000 f824 	bl	80018c8 <HAL_RCC_GetSysClockFreq>
 8001880:	4602      	mov	r2, r0
 8001882:	4b0d      	ldr	r3, [pc, #52]	; (80018b8 <HAL_RCC_ClockConfig+0x1f0>)
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	091b      	lsrs	r3, r3, #4
 8001888:	f003 030f 	and.w	r3, r3, #15
 800188c:	490b      	ldr	r1, [pc, #44]	; (80018bc <HAL_RCC_ClockConfig+0x1f4>)
 800188e:	5ccb      	ldrb	r3, [r1, r3]
 8001890:	f003 031f 	and.w	r3, r3, #31
 8001894:	fa22 f303 	lsr.w	r3, r2, r3
 8001898:	4a09      	ldr	r2, [pc, #36]	; (80018c0 <HAL_RCC_ClockConfig+0x1f8>)
 800189a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800189c:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <HAL_RCC_ClockConfig+0x1fc>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7fe fea3 	bl	80005ec <HAL_InitTick>
 80018a6:	4603      	mov	r3, r0
 80018a8:	72fb      	strb	r3, [r7, #11]

  return status;
 80018aa:	7afb      	ldrb	r3, [r7, #11]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3710      	adds	r7, #16
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}
 80018b4:	40022000 	.word	0x40022000
 80018b8:	40021000 	.word	0x40021000
 80018bc:	080020e0 	.word	0x080020e0
 80018c0:	20000000 	.word	0x20000000
 80018c4:	20000004 	.word	0x20000004

080018c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b089      	sub	sp, #36	; 0x24
 80018cc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80018ce:	2300      	movs	r3, #0
 80018d0:	61fb      	str	r3, [r7, #28]
 80018d2:	2300      	movs	r3, #0
 80018d4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018d6:	4b3e      	ldr	r3, [pc, #248]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	f003 030c 	and.w	r3, r3, #12
 80018de:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018e0:	4b3b      	ldr	r3, [pc, #236]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	f003 0303 	and.w	r3, r3, #3
 80018e8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d005      	beq.n	80018fc <HAL_RCC_GetSysClockFreq+0x34>
 80018f0:	693b      	ldr	r3, [r7, #16]
 80018f2:	2b0c      	cmp	r3, #12
 80018f4:	d121      	bne.n	800193a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d11e      	bne.n	800193a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80018fc:	4b34      	ldr	r3, [pc, #208]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0308 	and.w	r3, r3, #8
 8001904:	2b00      	cmp	r3, #0
 8001906:	d107      	bne.n	8001918 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001908:	4b31      	ldr	r3, [pc, #196]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800190a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800190e:	0a1b      	lsrs	r3, r3, #8
 8001910:	f003 030f 	and.w	r3, r3, #15
 8001914:	61fb      	str	r3, [r7, #28]
 8001916:	e005      	b.n	8001924 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001918:	4b2d      	ldr	r3, [pc, #180]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	091b      	lsrs	r3, r3, #4
 800191e:	f003 030f 	and.w	r3, r3, #15
 8001922:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001924:	4a2b      	ldr	r2, [pc, #172]	; (80019d4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800192c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d10d      	bne.n	8001950 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001934:	69fb      	ldr	r3, [r7, #28]
 8001936:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001938:	e00a      	b.n	8001950 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	2b04      	cmp	r3, #4
 800193e:	d102      	bne.n	8001946 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001940:	4b25      	ldr	r3, [pc, #148]	; (80019d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001942:	61bb      	str	r3, [r7, #24]
 8001944:	e004      	b.n	8001950 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	2b08      	cmp	r3, #8
 800194a:	d101      	bne.n	8001950 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800194c:	4b23      	ldr	r3, [pc, #140]	; (80019dc <HAL_RCC_GetSysClockFreq+0x114>)
 800194e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	2b0c      	cmp	r3, #12
 8001954:	d134      	bne.n	80019c0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001956:	4b1e      	ldr	r3, [pc, #120]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	f003 0303 	and.w	r3, r3, #3
 800195e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	2b02      	cmp	r3, #2
 8001964:	d003      	beq.n	800196e <HAL_RCC_GetSysClockFreq+0xa6>
 8001966:	68bb      	ldr	r3, [r7, #8]
 8001968:	2b03      	cmp	r3, #3
 800196a:	d003      	beq.n	8001974 <HAL_RCC_GetSysClockFreq+0xac>
 800196c:	e005      	b.n	800197a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800196e:	4b1a      	ldr	r3, [pc, #104]	; (80019d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001970:	617b      	str	r3, [r7, #20]
      break;
 8001972:	e005      	b.n	8001980 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001974:	4b19      	ldr	r3, [pc, #100]	; (80019dc <HAL_RCC_GetSysClockFreq+0x114>)
 8001976:	617b      	str	r3, [r7, #20]
      break;
 8001978:	e002      	b.n	8001980 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800197a:	69fb      	ldr	r3, [r7, #28]
 800197c:	617b      	str	r3, [r7, #20]
      break;
 800197e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001980:	4b13      	ldr	r3, [pc, #76]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	091b      	lsrs	r3, r3, #4
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	3301      	adds	r3, #1
 800198c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800198e:	4b10      	ldr	r3, [pc, #64]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	0a1b      	lsrs	r3, r3, #8
 8001994:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001998:	697a      	ldr	r2, [r7, #20]
 800199a:	fb03 f202 	mul.w	r2, r3, r2
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019a4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80019a6:	4b0a      	ldr	r3, [pc, #40]	; (80019d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	0e5b      	lsrs	r3, r3, #25
 80019ac:	f003 0303 	and.w	r3, r3, #3
 80019b0:	3301      	adds	r3, #1
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80019b6:	697a      	ldr	r2, [r7, #20]
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80019be:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80019c0:	69bb      	ldr	r3, [r7, #24]
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3724      	adds	r7, #36	; 0x24
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	40021000 	.word	0x40021000
 80019d4:	080020f0 	.word	0x080020f0
 80019d8:	00f42400 	.word	0x00f42400
 80019dc:	007a1200 	.word	0x007a1200

080019e0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b086      	sub	sp, #24
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80019e8:	2300      	movs	r3, #0
 80019ea:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80019ec:	4b2a      	ldr	r3, [pc, #168]	; (8001a98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80019ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d003      	beq.n	8001a00 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80019f8:	f7ff f9ee 	bl	8000dd8 <HAL_PWREx_GetVoltageRange>
 80019fc:	6178      	str	r0, [r7, #20]
 80019fe:	e014      	b.n	8001a2a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001a00:	4b25      	ldr	r3, [pc, #148]	; (8001a98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a04:	4a24      	ldr	r2, [pc, #144]	; (8001a98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a06:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a0a:	6593      	str	r3, [r2, #88]	; 0x58
 8001a0c:	4b22      	ldr	r3, [pc, #136]	; (8001a98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a10:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a14:	60fb      	str	r3, [r7, #12]
 8001a16:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001a18:	f7ff f9de 	bl	8000dd8 <HAL_PWREx_GetVoltageRange>
 8001a1c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001a1e:	4b1e      	ldr	r3, [pc, #120]	; (8001a98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a22:	4a1d      	ldr	r2, [pc, #116]	; (8001a98 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001a24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a28:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a30:	d10b      	bne.n	8001a4a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2b80      	cmp	r3, #128	; 0x80
 8001a36:	d919      	bls.n	8001a6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	2ba0      	cmp	r3, #160	; 0xa0
 8001a3c:	d902      	bls.n	8001a44 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a3e:	2302      	movs	r3, #2
 8001a40:	613b      	str	r3, [r7, #16]
 8001a42:	e013      	b.n	8001a6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a44:	2301      	movs	r3, #1
 8001a46:	613b      	str	r3, [r7, #16]
 8001a48:	e010      	b.n	8001a6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2b80      	cmp	r3, #128	; 0x80
 8001a4e:	d902      	bls.n	8001a56 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001a50:	2303      	movs	r3, #3
 8001a52:	613b      	str	r3, [r7, #16]
 8001a54:	e00a      	b.n	8001a6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2b80      	cmp	r3, #128	; 0x80
 8001a5a:	d102      	bne.n	8001a62 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001a5c:	2302      	movs	r3, #2
 8001a5e:	613b      	str	r3, [r7, #16]
 8001a60:	e004      	b.n	8001a6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2b70      	cmp	r3, #112	; 0x70
 8001a66:	d101      	bne.n	8001a6c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001a68:	2301      	movs	r3, #1
 8001a6a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001a6c:	4b0b      	ldr	r3, [pc, #44]	; (8001a9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f023 0207 	bic.w	r2, r3, #7
 8001a74:	4909      	ldr	r1, [pc, #36]	; (8001a9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a76:	693b      	ldr	r3, [r7, #16]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001a7c:	4b07      	ldr	r3, [pc, #28]	; (8001a9c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0307 	and.w	r3, r3, #7
 8001a84:	693a      	ldr	r2, [r7, #16]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d001      	beq.n	8001a8e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e000      	b.n	8001a90 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001a8e:	2300      	movs	r3, #0
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	3718      	adds	r7, #24
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	40022000 	.word	0x40022000

08001aa0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	b086      	sub	sp, #24
 8001aa4:	af00      	add	r7, sp, #0
 8001aa6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001aac:	2300      	movs	r3, #0
 8001aae:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d031      	beq.n	8001b20 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ac0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001ac4:	d01a      	beq.n	8001afc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8001ac6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001aca:	d814      	bhi.n	8001af6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d009      	beq.n	8001ae4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001ad0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001ad4:	d10f      	bne.n	8001af6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001ad6:	4b5d      	ldr	r3, [pc, #372]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ad8:	68db      	ldr	r3, [r3, #12]
 8001ada:	4a5c      	ldr	r2, [pc, #368]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001adc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ae0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001ae2:	e00c      	b.n	8001afe <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	3304      	adds	r3, #4
 8001ae8:	2100      	movs	r1, #0
 8001aea:	4618      	mov	r0, r3
 8001aec:	f000 f9ce 	bl	8001e8c <RCCEx_PLLSAI1_Config>
 8001af0:	4603      	mov	r3, r0
 8001af2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001af4:	e003      	b.n	8001afe <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	74fb      	strb	r3, [r7, #19]
      break;
 8001afa:	e000      	b.n	8001afe <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8001afc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001afe:	7cfb      	ldrb	r3, [r7, #19]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d10b      	bne.n	8001b1c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001b04:	4b51      	ldr	r3, [pc, #324]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b0a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b12:	494e      	ldr	r1, [pc, #312]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001b14:	4313      	orrs	r3, r2
 8001b16:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001b1a:	e001      	b.n	8001b20 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001b1c:	7cfb      	ldrb	r3, [r7, #19]
 8001b1e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	f000 809e 	beq.w	8001c6a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001b32:	4b46      	ldr	r3, [pc, #280]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e000      	b.n	8001b44 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001b42:	2300      	movs	r3, #0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d00d      	beq.n	8001b64 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b48:	4b40      	ldr	r3, [pc, #256]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001b4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b4c:	4a3f      	ldr	r2, [pc, #252]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001b4e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b52:	6593      	str	r3, [r2, #88]	; 0x58
 8001b54:	4b3d      	ldr	r3, [pc, #244]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b58:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b5c:	60bb      	str	r3, [r7, #8]
 8001b5e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b60:	2301      	movs	r3, #1
 8001b62:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001b64:	4b3a      	ldr	r3, [pc, #232]	; (8001c50 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a39      	ldr	r2, [pc, #228]	; (8001c50 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001b6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b6e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001b70:	f7fe fd8c 	bl	800068c <HAL_GetTick>
 8001b74:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001b76:	e009      	b.n	8001b8c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b78:	f7fe fd88 	bl	800068c <HAL_GetTick>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	1ad3      	subs	r3, r2, r3
 8001b82:	2b02      	cmp	r3, #2
 8001b84:	d902      	bls.n	8001b8c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8001b86:	2303      	movs	r3, #3
 8001b88:	74fb      	strb	r3, [r7, #19]
        break;
 8001b8a:	e005      	b.n	8001b98 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001b8c:	4b30      	ldr	r3, [pc, #192]	; (8001c50 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d0ef      	beq.n	8001b78 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8001b98:	7cfb      	ldrb	r3, [r7, #19]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d15a      	bne.n	8001c54 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001b9e:	4b2b      	ldr	r3, [pc, #172]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ba4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001ba8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d01e      	beq.n	8001bee <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001bb4:	697a      	ldr	r2, [r7, #20]
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	d019      	beq.n	8001bee <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001bba:	4b24      	ldr	r3, [pc, #144]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001bbc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001bc4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001bc6:	4b21      	ldr	r3, [pc, #132]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001bc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bcc:	4a1f      	ldr	r2, [pc, #124]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001bce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bd2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001bd6:	4b1d      	ldr	r3, [pc, #116]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001bd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bdc:	4a1b      	ldr	r2, [pc, #108]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001bde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001be2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001be6:	4a19      	ldr	r2, [pc, #100]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001bee:	697b      	ldr	r3, [r7, #20]
 8001bf0:	f003 0301 	and.w	r3, r3, #1
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d016      	beq.n	8001c26 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bf8:	f7fe fd48 	bl	800068c <HAL_GetTick>
 8001bfc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001bfe:	e00b      	b.n	8001c18 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c00:	f7fe fd44 	bl	800068c <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	1ad3      	subs	r3, r2, r3
 8001c0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d902      	bls.n	8001c18 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8001c12:	2303      	movs	r3, #3
 8001c14:	74fb      	strb	r3, [r7, #19]
            break;
 8001c16:	e006      	b.n	8001c26 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c18:	4b0c      	ldr	r3, [pc, #48]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d0ec      	beq.n	8001c00 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8001c26:	7cfb      	ldrb	r3, [r7, #19]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d10b      	bne.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001c2c:	4b07      	ldr	r3, [pc, #28]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c32:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001c3a:	4904      	ldr	r1, [pc, #16]	; (8001c4c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001c3c:	4313      	orrs	r3, r2
 8001c3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001c42:	e009      	b.n	8001c58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001c44:	7cfb      	ldrb	r3, [r7, #19]
 8001c46:	74bb      	strb	r3, [r7, #18]
 8001c48:	e006      	b.n	8001c58 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8001c4a:	bf00      	nop
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001c54:	7cfb      	ldrb	r3, [r7, #19]
 8001c56:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001c58:	7c7b      	ldrb	r3, [r7, #17]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d105      	bne.n	8001c6a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c5e:	4b8a      	ldr	r3, [pc, #552]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c62:	4a89      	ldr	r2, [pc, #548]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001c64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c68:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d00a      	beq.n	8001c8c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001c76:	4b84      	ldr	r3, [pc, #528]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001c78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c7c:	f023 0203 	bic.w	r2, r3, #3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a1b      	ldr	r3, [r3, #32]
 8001c84:	4980      	ldr	r1, [pc, #512]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f003 0302 	and.w	r3, r3, #2
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d00a      	beq.n	8001cae <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001c98:	4b7b      	ldr	r3, [pc, #492]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001c9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c9e:	f023 020c 	bic.w	r2, r3, #12
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca6:	4978      	ldr	r1, [pc, #480]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001ca8:	4313      	orrs	r3, r2
 8001caa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 0320 	and.w	r3, r3, #32
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d00a      	beq.n	8001cd0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001cba:	4b73      	ldr	r3, [pc, #460]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001cbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cc0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc8:	496f      	ldr	r1, [pc, #444]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001cca:	4313      	orrs	r3, r2
 8001ccc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d00a      	beq.n	8001cf2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001cdc:	4b6a      	ldr	r3, [pc, #424]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ce2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cea:	4967      	ldr	r1, [pc, #412]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001cec:	4313      	orrs	r3, r2
 8001cee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d00a      	beq.n	8001d14 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001cfe:	4b62      	ldr	r3, [pc, #392]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d04:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d0c:	495e      	ldr	r1, [pc, #376]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d00a      	beq.n	8001d36 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001d20:	4b59      	ldr	r3, [pc, #356]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d26:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d2e:	4956      	ldr	r1, [pc, #344]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001d30:	4313      	orrs	r3, r2
 8001d32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d00a      	beq.n	8001d58 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001d42:	4b51      	ldr	r3, [pc, #324]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001d44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d48:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d50:	494d      	ldr	r1, [pc, #308]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001d52:	4313      	orrs	r3, r2
 8001d54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d028      	beq.n	8001db6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001d64:	4b48      	ldr	r3, [pc, #288]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001d66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d6a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	4945      	ldr	r1, [pc, #276]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001d74:	4313      	orrs	r3, r2
 8001d76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d7e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001d82:	d106      	bne.n	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001d84:	4b40      	ldr	r3, [pc, #256]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001d86:	68db      	ldr	r3, [r3, #12]
 8001d88:	4a3f      	ldr	r2, [pc, #252]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001d8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d8e:	60d3      	str	r3, [r2, #12]
 8001d90:	e011      	b.n	8001db6 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001d9a:	d10c      	bne.n	8001db6 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	3304      	adds	r3, #4
 8001da0:	2101      	movs	r1, #1
 8001da2:	4618      	mov	r0, r3
 8001da4:	f000 f872 	bl	8001e8c <RCCEx_PLLSAI1_Config>
 8001da8:	4603      	mov	r3, r0
 8001daa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8001dac:	7cfb      	ldrb	r3, [r7, #19]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8001db2:	7cfb      	ldrb	r3, [r7, #19]
 8001db4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d028      	beq.n	8001e14 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001dc2:	4b31      	ldr	r3, [pc, #196]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001dc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dc8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd0:	492d      	ldr	r1, [pc, #180]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ddc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001de0:	d106      	bne.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001de2:	4b29      	ldr	r3, [pc, #164]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001de4:	68db      	ldr	r3, [r3, #12]
 8001de6:	4a28      	ldr	r2, [pc, #160]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001de8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001dec:	60d3      	str	r3, [r2, #12]
 8001dee:	e011      	b.n	8001e14 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001df8:	d10c      	bne.n	8001e14 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	3304      	adds	r3, #4
 8001dfe:	2101      	movs	r1, #1
 8001e00:	4618      	mov	r0, r3
 8001e02:	f000 f843 	bl	8001e8c <RCCEx_PLLSAI1_Config>
 8001e06:	4603      	mov	r3, r0
 8001e08:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001e0a:	7cfb      	ldrb	r3, [r7, #19]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d001      	beq.n	8001e14 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8001e10:	7cfb      	ldrb	r3, [r7, #19]
 8001e12:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d01c      	beq.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001e20:	4b19      	ldr	r3, [pc, #100]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001e22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e26:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e2e:	4916      	ldr	r1, [pc, #88]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001e30:	4313      	orrs	r3, r2
 8001e32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e3a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001e3e:	d10c      	bne.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	3304      	adds	r3, #4
 8001e44:	2102      	movs	r1, #2
 8001e46:	4618      	mov	r0, r3
 8001e48:	f000 f820 	bl	8001e8c <RCCEx_PLLSAI1_Config>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001e50:	7cfb      	ldrb	r3, [r7, #19]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8001e56:	7cfb      	ldrb	r3, [r7, #19]
 8001e58:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d00a      	beq.n	8001e7c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001e66:	4b08      	ldr	r3, [pc, #32]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001e68:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e6c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e74:	4904      	ldr	r1, [pc, #16]	; (8001e88 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001e76:	4313      	orrs	r3, r2
 8001e78:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8001e7c:	7cbb      	ldrb	r3, [r7, #18]
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3718      	adds	r7, #24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40021000 	.word	0x40021000

08001e8c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8001e96:	2300      	movs	r3, #0
 8001e98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001e9a:	4b74      	ldr	r3, [pc, #464]	; (800206c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	f003 0303 	and.w	r3, r3, #3
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d018      	beq.n	8001ed8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001ea6:	4b71      	ldr	r3, [pc, #452]	; (800206c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	f003 0203 	and.w	r2, r3, #3
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	429a      	cmp	r2, r3
 8001eb4:	d10d      	bne.n	8001ed2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
       ||
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d009      	beq.n	8001ed2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001ebe:	4b6b      	ldr	r3, [pc, #428]	; (800206c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001ec0:	68db      	ldr	r3, [r3, #12]
 8001ec2:	091b      	lsrs	r3, r3, #4
 8001ec4:	f003 0307 	and.w	r3, r3, #7
 8001ec8:	1c5a      	adds	r2, r3, #1
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
       ||
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d047      	beq.n	8001f62 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	73fb      	strb	r3, [r7, #15]
 8001ed6:	e044      	b.n	8001f62 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	2b03      	cmp	r3, #3
 8001ede:	d018      	beq.n	8001f12 <RCCEx_PLLSAI1_Config+0x86>
 8001ee0:	2b03      	cmp	r3, #3
 8001ee2:	d825      	bhi.n	8001f30 <RCCEx_PLLSAI1_Config+0xa4>
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d002      	beq.n	8001eee <RCCEx_PLLSAI1_Config+0x62>
 8001ee8:	2b02      	cmp	r3, #2
 8001eea:	d009      	beq.n	8001f00 <RCCEx_PLLSAI1_Config+0x74>
 8001eec:	e020      	b.n	8001f30 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001eee:	4b5f      	ldr	r3, [pc, #380]	; (800206c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d11d      	bne.n	8001f36 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001efe:	e01a      	b.n	8001f36 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001f00:	4b5a      	ldr	r3, [pc, #360]	; (800206c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d116      	bne.n	8001f3a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001f10:	e013      	b.n	8001f3a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001f12:	4b56      	ldr	r3, [pc, #344]	; (800206c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d10f      	bne.n	8001f3e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001f1e:	4b53      	ldr	r3, [pc, #332]	; (800206c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d109      	bne.n	8001f3e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8001f2e:	e006      	b.n	8001f3e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	73fb      	strb	r3, [r7, #15]
      break;
 8001f34:	e004      	b.n	8001f40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8001f36:	bf00      	nop
 8001f38:	e002      	b.n	8001f40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8001f3a:	bf00      	nop
 8001f3c:	e000      	b.n	8001f40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8001f3e:	bf00      	nop
    }

    if(status == HAL_OK)
 8001f40:	7bfb      	ldrb	r3, [r7, #15]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d10d      	bne.n	8001f62 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001f46:	4b49      	ldr	r3, [pc, #292]	; (800206c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001f48:	68db      	ldr	r3, [r3, #12]
 8001f4a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6819      	ldr	r1, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	3b01      	subs	r3, #1
 8001f58:	011b      	lsls	r3, r3, #4
 8001f5a:	430b      	orrs	r3, r1
 8001f5c:	4943      	ldr	r1, [pc, #268]	; (800206c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8001f62:	7bfb      	ldrb	r3, [r7, #15]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d17c      	bne.n	8002062 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8001f68:	4b40      	ldr	r3, [pc, #256]	; (800206c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a3f      	ldr	r2, [pc, #252]	; (800206c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001f6e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001f72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f74:	f7fe fb8a 	bl	800068c <HAL_GetTick>
 8001f78:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001f7a:	e009      	b.n	8001f90 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001f7c:	f7fe fb86 	bl	800068c <HAL_GetTick>
 8001f80:	4602      	mov	r2, r0
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	1ad3      	subs	r3, r2, r3
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d902      	bls.n	8001f90 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8001f8a:	2303      	movs	r3, #3
 8001f8c:	73fb      	strb	r3, [r7, #15]
        break;
 8001f8e:	e005      	b.n	8001f9c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8001f90:	4b36      	ldr	r3, [pc, #216]	; (800206c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d1ef      	bne.n	8001f7c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8001f9c:	7bfb      	ldrb	r3, [r7, #15]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d15f      	bne.n	8002062 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d110      	bne.n	8001fca <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001fa8:	4b30      	ldr	r3, [pc, #192]	; (800206c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001faa:	691b      	ldr	r3, [r3, #16]
 8001fac:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8001fb0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	6892      	ldr	r2, [r2, #8]
 8001fb8:	0211      	lsls	r1, r2, #8
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	68d2      	ldr	r2, [r2, #12]
 8001fbe:	06d2      	lsls	r2, r2, #27
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	492a      	ldr	r1, [pc, #168]	; (800206c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	610b      	str	r3, [r1, #16]
 8001fc8:	e027      	b.n	800201a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	2b01      	cmp	r3, #1
 8001fce:	d112      	bne.n	8001ff6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001fd0:	4b26      	ldr	r3, [pc, #152]	; (800206c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001fd2:	691b      	ldr	r3, [r3, #16]
 8001fd4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8001fd8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001fdc:	687a      	ldr	r2, [r7, #4]
 8001fde:	6892      	ldr	r2, [r2, #8]
 8001fe0:	0211      	lsls	r1, r2, #8
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	6912      	ldr	r2, [r2, #16]
 8001fe6:	0852      	lsrs	r2, r2, #1
 8001fe8:	3a01      	subs	r2, #1
 8001fea:	0552      	lsls	r2, r2, #21
 8001fec:	430a      	orrs	r2, r1
 8001fee:	491f      	ldr	r1, [pc, #124]	; (800206c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	610b      	str	r3, [r1, #16]
 8001ff4:	e011      	b.n	800201a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001ff6:	4b1d      	ldr	r3, [pc, #116]	; (800206c <RCCEx_PLLSAI1_Config+0x1e0>)
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001ffe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002002:	687a      	ldr	r2, [r7, #4]
 8002004:	6892      	ldr	r2, [r2, #8]
 8002006:	0211      	lsls	r1, r2, #8
 8002008:	687a      	ldr	r2, [r7, #4]
 800200a:	6952      	ldr	r2, [r2, #20]
 800200c:	0852      	lsrs	r2, r2, #1
 800200e:	3a01      	subs	r2, #1
 8002010:	0652      	lsls	r2, r2, #25
 8002012:	430a      	orrs	r2, r1
 8002014:	4915      	ldr	r1, [pc, #84]	; (800206c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002016:	4313      	orrs	r3, r2
 8002018:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800201a:	4b14      	ldr	r3, [pc, #80]	; (800206c <RCCEx_PLLSAI1_Config+0x1e0>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a13      	ldr	r2, [pc, #76]	; (800206c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002020:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002024:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002026:	f7fe fb31 	bl	800068c <HAL_GetTick>
 800202a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800202c:	e009      	b.n	8002042 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800202e:	f7fe fb2d 	bl	800068c <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	68bb      	ldr	r3, [r7, #8]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	2b02      	cmp	r3, #2
 800203a:	d902      	bls.n	8002042 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800203c:	2303      	movs	r3, #3
 800203e:	73fb      	strb	r3, [r7, #15]
          break;
 8002040:	e005      	b.n	800204e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002042:	4b0a      	ldr	r3, [pc, #40]	; (800206c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d0ef      	beq.n	800202e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800204e:	7bfb      	ldrb	r3, [r7, #15]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d106      	bne.n	8002062 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002054:	4b05      	ldr	r3, [pc, #20]	; (800206c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002056:	691a      	ldr	r2, [r3, #16]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	699b      	ldr	r3, [r3, #24]
 800205c:	4903      	ldr	r1, [pc, #12]	; (800206c <RCCEx_PLLSAI1_Config+0x1e0>)
 800205e:	4313      	orrs	r3, r2
 8002060:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002062:	7bfb      	ldrb	r3, [r7, #15]
}
 8002064:	4618      	mov	r0, r3
 8002066:	3710      	adds	r7, #16
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}
 800206c:	40021000 	.word	0x40021000

08002070 <memset>:
 8002070:	4402      	add	r2, r0
 8002072:	4603      	mov	r3, r0
 8002074:	4293      	cmp	r3, r2
 8002076:	d100      	bne.n	800207a <memset+0xa>
 8002078:	4770      	bx	lr
 800207a:	f803 1b01 	strb.w	r1, [r3], #1
 800207e:	e7f9      	b.n	8002074 <memset+0x4>

08002080 <__libc_init_array>:
 8002080:	b570      	push	{r4, r5, r6, lr}
 8002082:	4d0d      	ldr	r5, [pc, #52]	; (80020b8 <__libc_init_array+0x38>)
 8002084:	4c0d      	ldr	r4, [pc, #52]	; (80020bc <__libc_init_array+0x3c>)
 8002086:	1b64      	subs	r4, r4, r5
 8002088:	10a4      	asrs	r4, r4, #2
 800208a:	2600      	movs	r6, #0
 800208c:	42a6      	cmp	r6, r4
 800208e:	d109      	bne.n	80020a4 <__libc_init_array+0x24>
 8002090:	4d0b      	ldr	r5, [pc, #44]	; (80020c0 <__libc_init_array+0x40>)
 8002092:	4c0c      	ldr	r4, [pc, #48]	; (80020c4 <__libc_init_array+0x44>)
 8002094:	f000 f818 	bl	80020c8 <_init>
 8002098:	1b64      	subs	r4, r4, r5
 800209a:	10a4      	asrs	r4, r4, #2
 800209c:	2600      	movs	r6, #0
 800209e:	42a6      	cmp	r6, r4
 80020a0:	d105      	bne.n	80020ae <__libc_init_array+0x2e>
 80020a2:	bd70      	pop	{r4, r5, r6, pc}
 80020a4:	f855 3b04 	ldr.w	r3, [r5], #4
 80020a8:	4798      	blx	r3
 80020aa:	3601      	adds	r6, #1
 80020ac:	e7ee      	b.n	800208c <__libc_init_array+0xc>
 80020ae:	f855 3b04 	ldr.w	r3, [r5], #4
 80020b2:	4798      	blx	r3
 80020b4:	3601      	adds	r6, #1
 80020b6:	e7f2      	b.n	800209e <__libc_init_array+0x1e>
 80020b8:	08002120 	.word	0x08002120
 80020bc:	08002120 	.word	0x08002120
 80020c0:	08002120 	.word	0x08002120
 80020c4:	08002124 	.word	0x08002124

080020c8 <_init>:
 80020c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020ca:	bf00      	nop
 80020cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020ce:	bc08      	pop	{r3}
 80020d0:	469e      	mov	lr, r3
 80020d2:	4770      	bx	lr

080020d4 <_fini>:
 80020d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020d6:	bf00      	nop
 80020d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80020da:	bc08      	pop	{r3}
 80020dc:	469e      	mov	lr, r3
 80020de:	4770      	bx	lr
